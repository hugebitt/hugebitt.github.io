<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Keunbit 블로그</title>
    <link>https://keunbit.blog/</link>
    
    <atom:link href="https://keunbit.blog/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>원활한 커뮤니케이션을 통한 최고의 아웃풋을 만들어낼 수 있는 능력</description>
    <pubDate>Sat, 14 Jan 2023 07:18:58 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>02. Variables</title>
      <link>https://keunbit.blog/2023/01/14/programming/dart/dart_tutorial-02/</link>
      <guid>https://keunbit.blog/2023/01/14/programming/dart/dart_tutorial-02/</guid>
      <pubDate>Fri, 13 Jan 2023 16:05:33 GMT</pubDate>
      
      <description>&lt;p&gt;안녕하세요.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Dart&lt;/em&gt;&lt;/strong&gt; 관련 &lt;code&gt;tutorial code&lt;/code&gt; 는 Nomad Coder 의 &lt;a href=&quot;https://nomadcoders.co/dart-for-beginners?gclid=Cj0KCQiAn4SeBhCwARIsANeF9DLit0aaY7kU19xUkl7febsBpvfz1vBeFdp0U6CKx2a4P9Le8dbL1CQaAlYQEALw_wcB&quot;&gt;“Dart 시작하기”&lt;/a&gt; 강의 내용을 참고하였음을 밝힙니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; Hello World&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&gt; Variables&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요.</p><p><strong><em>Dart</em></strong> 관련 <code>tutorial code</code> 는 Nomad Coder 의 <a href="https://nomadcoders.co/dart-for-beginners?gclid=Cj0KCQiAn4SeBhCwARIsANeF9DLit0aaY7kU19xUkl7febsBpvfz1vBeFdp0U6CKx2a4P9Le8dbL1CQaAlYQEALw_wcB">“Dart 시작하기”</a> 강의 내용을 참고하였음을 밝힙니다.</p><ul><li><input disabled="" type="checkbox"> Hello World</li><li><input disabled="" type="checkbox"> Variables</li></ul><span id="more"></span><h3 id="var"><a href="#var" class="headerlink" title="var"></a><strong>var</strong></h3><ul><li>관습적으로나 함수나 메소드 내부에 지역 변수를 선언할 때에는 <code>var</code> 를 사용합니다.</li></ul><figure class="highlight dart"><figcaption><span>var</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;keunbit&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>class</strong> 에서 변수나 property를 선언할 때에는 타입을 지정해 줍니다.</li></ul><figure class="highlight dart"><figcaption><span>property</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">&#x27;keunbit&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>변수를 할당할 때 여러 타입의 value가 할당 될 수 있도록 하고 싶을 때는 <code>dynamic</code> 을 사용합니다.</li></ul><figure class="highlight dart"><figcaption><span>dynamic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">dynamic</span> name = <span class="string">&#x27;keunbit&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(name);</span><br><span class="line">  name = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">print</span>(name);</span><br><span class="line">  name = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">print</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="final"><a href="#final" class="headerlink" title="final"></a><strong>final</strong></h3><ul><li><code>final</code> 은 한 번 정의된 변수를 수정할 수 없게 만들고 싶을 때 사용합니다.</li></ul><figure class="highlight dart"><figcaption><span>final</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">final</span> name = <span class="string">&#x27;keunbit&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(name);</span><br><span class="line">  name = <span class="string">&#x27;keunbit2&#x27;</span>;  <span class="comment">// 에러 발생. The final variable &#x27;name&#x27; can only be set once.</span></span><br><span class="line">  <span class="built_in">print</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="late"><a href="#late" class="headerlink" title="late"></a><strong>late</strong></h3><ul><li><code>late</code> 는 변수를 선언할 때 초기화를 하지 않고, 나중에 초기화를 하고 싶을 때 사용합니다.</li><li><code>final</code> 이나 <code>var</code> 앞에 붙여줄 수 있는 수식어 입니다.</li><li><strong>api</strong> 를 통해 받아온 데이터를 사용할 때 유용합니다. (<code>Data fetching</code>)</li></ul><figure class="highlight dart"><figcaption><span>late</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something, go to api</span></span><br><span class="line">  name = <span class="string">&#x27;keunbit&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a><strong>const</strong></h3><ul><li><strong><em>dart</em></strong> 의 <strong>const</strong> 는 <strong><em>javascript</em></strong> 나 <strong><em>typescript</em></strong> 와는 조금 다른 개념입니다.</li><li><strong><em>javascript</em></strong> 나 <strong><em>typescript</em></strong> 에서 사용하는 <strong>const</strong> 는 <strong><em>dart</em></strong> 의 <strong>final</strong> 과 유사합니다.</li><li><strong><em>dart</em></strong> 에서 <strong>const</strong> 는 <code>compile-time constant</code> 입니다. 즉, 우리가 앱스토어 앱을 올리기 전에 알고 있는 값들을 <strong>const</strong> 로 선언해줍니다.</li></ul><figure class="highlight dart"><figcaption><span>const</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">const</span> max_allowed_price = <span class="number">120</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>추가 의견이나 수정이 필요한 부분이 있다면 언제든지 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://nomadcoders.co/dart-for-beginners?gclid=Cj0KCQiAn4SeBhCwARIsANeF9DLit0aaY7kU19xUkl7febsBpvfz1vBeFdp0U6CKx2a4P9Le8dbL1CQaAlYQEALw_wcB">“Dart 시작하기”</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Dart/">Dart</category>
      
      
      <category domain="https://keunbit.blog/tags/Dart/">Dart</category>
      
      <category domain="https://keunbit.blog/tags/Flutter/">Flutter</category>
      
      <category domain="https://keunbit.blog/tags/Application/">Application</category>
      
      <category domain="https://keunbit.blog/tags/Web/">Web</category>
      
      <category domain="https://keunbit.blog/tags/Front/">Front</category>
      
      
      <comments>https://keunbit.blog/2023/01/14/programming/dart/dart_tutorial-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Previous/next post with category Filter</title>
      <link>https://keunbit.blog/2023/01/13/programming/log/log-02/</link>
      <guid>https://keunbit.blog/2023/01/13/programming/log/log-02/</guid>
      <pubDate>Fri, 13 Jan 2023 06:43:17 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;&lt;strong&gt;Intro&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;안녕하세요. 이번 포스팅에서는 현재 블로그에서 포스팅 밑에 &lt;code&gt;이전글&lt;/code&gt;, &lt;code&gt;다음글&lt;/code&gt; 에 대해서 카테고리별로 표시될 수 있도록 커스터마이징 하는 방식에 대해 짧게 공유드리려 합니다.&lt;/p&gt;
&lt;p&gt;기존에는 작성날짜를 기준으로 sorting이 되어있고, 포스트의 카테고리와는 무관하게 이전에 작성했던 글이 보이는 것이 마음에 걸려 하루(?)정도 삽질 끝에 해결하였습니다.&lt;/p&gt;
&lt;p&gt;제가 사용하는 테마는 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot;&gt;hexo-icarus-theme&lt;/a&gt; 라는 테마입니다. 버전은 5.1.1 을 쓰고 있습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a><strong>Intro</strong></h3><p>안녕하세요. 이번 포스팅에서는 현재 블로그에서 포스팅 밑에 <code>이전글</code>, <code>다음글</code> 에 대해서 카테고리별로 표시될 수 있도록 커스터마이징 하는 방식에 대해 짧게 공유드리려 합니다.</p><p>기존에는 작성날짜를 기준으로 sorting이 되어있고, 포스트의 카테고리와는 무관하게 이전에 작성했던 글이 보이는 것이 마음에 걸려 하루(?)정도 삽질 끝에 해결하였습니다.</p><p>제가 사용하는 테마는 <a href="https://github.com/ppoffice/hexo-theme-icarus">hexo-icarus-theme</a> 라는 테마입니다. 버전은 5.1.1 을 쓰고 있습니다.</p><span id="more"></span><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><p>아래 <code>코드 추가</code> 라고 되어 있는 부분을 추가한 후에 렌더링되는 부분의 변수명도 바꿔주면 됩니다.</p><figure class="highlight javascript"><figcaption><span>/icarus/layout/common/article.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; config, helper, page, index &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; article, plugins &#125; = config;</span><br><span class="line">    <span class="keyword">const</span> &#123; url_for, date, date_xml, __, _p &#125; = helper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> indexLaunguage = <span class="title function_">toMomentLocale</span>(config.<span class="property">language</span> || <span class="string">&#x27;en&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> language = <span class="title function_">toMomentLocale</span>(page.<span class="property">lang</span> || page.<span class="property">language</span> || config.<span class="property">language</span> || <span class="string">&#x27;en&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> cover = page.<span class="property">cover</span> ? <span class="title function_">url_for</span>(page.<span class="property">cover</span>) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> updateTime = article &amp;&amp; article.<span class="property">update_time</span> !== <span class="literal">undefined</span> ? article.<span class="property">update_time</span> : <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> isUpdated = page.<span class="property">updated</span> &amp;&amp; !<span class="title function_">moment</span>(page.<span class="property">date</span>).<span class="title function_">isSame</span>(<span class="title function_">moment</span>(page.<span class="property">updated</span>));</span><br><span class="line">    <span class="keyword">const</span> shouldShowUpdated = page.<span class="property">updated</span> &amp;&amp; ((updateTime === <span class="string">&#x27;auto&#x27;</span> &amp;&amp; isUpdated) || updateTime === <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 이 부분 코드 추가</span></span><br><span class="line">    <span class="keyword">let</span> nextPage = page.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">let</span> prevPage = page.<span class="property">prev</span>;</span><br><span class="line">    <span class="keyword">if</span> (page &amp;&amp; nextPage &amp;&amp; prevPage) &#123;</span><br><span class="line">      <span class="keyword">if</span> (page.<span class="property">categories</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentCategory = page.<span class="property">categories</span>.<span class="property">data</span>[<span class="number">1</span>].<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">while</span> (nextPage.<span class="property">categories</span>.<span class="property">data</span>[<span class="number">1</span>].<span class="property">name</span> !== currentCategory &amp;&amp; nextPage.<span class="property">next</span>) &#123;</span><br><span class="line">          nextPage = nextPage.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (prevPage.<span class="property">categories</span>.<span class="property">data</span>.<span class="property">length</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line">          prevPage = page.<span class="property">prev</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (prevPage.<span class="property">categories</span>.<span class="property">data</span>[<span class="number">1</span>].<span class="property">name</span> !== currentCategory &amp;&amp; prevPage.<span class="property">prev</span>) &#123;</span><br><span class="line">            prevPage = prevPage.<span class="property">prev</span>;</span><br><span class="line">            <span class="keyword">if</span> (prevPage.<span class="property">categories</span>.<span class="property">data</span>.<span class="property">length</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line">              prevPage = page.<span class="property">prev</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nextPage = <span class="literal">null</span>;</span><br><span class="line">        prevPage = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// 이 부분 코드 추가</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span>(렌더링 코드...)<span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>그리고 렌더링 되는 부분도 마찬가지로 수정</p><figure class="highlight javascript"><figcaption><span>return() page.next , page.prev 변경</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">!index &amp;&amp; (prevPage || nextPage) ? (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;post-navigation mt-4 level is-mobile&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;nextPage ? (</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;level-start&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">class</span>=<span class="string">&#123;</span>`<span class="attr">article-nav-next</span> <span class="attr">level</span> <span class="attr">level-item</span>$&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">!<span class="attr">nextPage</span> ? &#x27; <span class="attr">is-hidden-mobile</span>&#x27; <span class="attr">:</span> &#x27;&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&#125; <span class="attr">link-muted</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">href</span>=<span class="string">&#123;url_for(nextPage.path)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;level-item fas fa-chevron-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;level-item&quot;</span>&gt;</span>&#123;nextPage.title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">) : null&#125;</span></span><br><span class="line"><span class="language-xml">&#123;prevPage ? (</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;level-end&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">class</span>=<span class="string">&#123;</span>`<span class="attr">article-nav-prev</span> <span class="attr">level</span> <span class="attr">level-item</span>$&#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">!<span class="attr">prevPage</span> ? &#x27; <span class="attr">is-hidden-mobile</span>&#x27; <span class="attr">:</span> &#x27;&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&#125; <span class="attr">link-muted</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">href</span>=<span class="string">&#123;url_for(prevPage.path)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;level-item&quot;</span>&gt;</span>&#123;prevPage.title&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;level-item fas fa-chevron-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">) : null&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line">) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>추가 설명을 더 해보자면</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nextPage.<span class="property">categories</span>.<span class="property">data</span>[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>여기서 인덱스 값을 1을 준 이유는, 각자의 블로그 카테고리의 level을 어떻게 설정 했느냐에 따라 다르게 설정해주면 될 것 같습니다.</p><p>저는 <code>Programming &gt; Python</code> 여기서 <code>Python</code> 카테고리만 걸러주기 위해 <code>1</code> 이라는 인덱스 값을 준 것입니다.</p><p>도움이 되셨길 바랍니다!!!. 혹은, 더 좋은 방법이 있다면 댓글 남겨주시면 감사하겠습니다!!!</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://github.com/hexojs/hexo/issues/2270">https://github.com/hexojs/hexo/issues/2270</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/log/">log</category>
      
      
      <category domain="https://keunbit.blog/tags/hexo-icarus-theme/">hexo-icarus-theme</category>
      
      <category domain="https://keunbit.blog/tags/Category/">Category</category>
      
      <category domain="https://keunbit.blog/tags/Blog/">Blog</category>
      
      <category domain="https://keunbit.blog/tags/Custom/">Custom</category>
      
      <category domain="https://keunbit.blog/tags/hexo/">hexo</category>
      
      <category domain="https://keunbit.blog/tags/icarus/">icarus</category>
      
      <category domain="https://keunbit.blog/tags/theme/">theme</category>
      
      <category domain="https://keunbit.blog/tags/post/">post</category>
      
      
      <comments>https://keunbit.blog/2023/01/13/programming/log/log-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>01. Why Dart?</title>
      <link>https://keunbit.blog/2023/01/12/programming/dart/dart_tutorial-01/</link>
      <guid>https://keunbit.blog/2023/01/12/programming/dart/dart_tutorial-01/</guid>
      <pubDate>Thu, 12 Jan 2023 06:12:34 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;안녕하세요. 이번 Dart tutorial은 개인적으로 사이드 프로젝트를 진행하면서 공부한 내용을 정리할 겸 메모하는 용도로 작성하려고 합니다.&lt;/p&gt;
&lt;p&gt;이번 사이드 프로젝트에서는 &lt;strong&gt;&lt;em&gt;Flutter Language&lt;/em&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요. 이번 Dart tutorial은 개인적으로 사이드 프로젝트를 진행하면서 공부한 내용을 정리할 겸 메모하는 용도로 작성하려고 합니다.</p><p>이번 사이드 프로젝트에서는 <strong><em>Flutter Language</em></strong> 로 <strong>App</strong> 개발을 진행할거라 이에 필요한 필수 지식인 <strong><em>Dart</em></strong> 부터 정리하려고 합니다.</p><p>우선 왜 <strong><em>Flutter</em></strong> 를 선택했는지에 대해서는 차근차근 내용을 업데이트 하도록 하겠습니다.</p><p><strong><em>Dart</em></strong> 관련 <code>tutorial code</code> 는 Nomad Coder 의 <a href="https://nomadcoders.co/dart-for-beginners?gclid=Cj0KCQiAn4SeBhCwARIsANeF9DLit0aaY7kU19xUkl7febsBpvfz1vBeFdp0U6CKx2a4P9Le8dbL1CQaAlYQEALw_wcB">“Dart 시작하기”</a> 강의 내용을 참고하였음을 밝힙니다.</p><p><em>추가 의견이나 수정이 필요한 부분이 있다면 언제든지 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://nomadcoders.co/dart-for-beginners?gclid=Cj0KCQiAn4SeBhCwARIsANeF9DLit0aaY7kU19xUkl7febsBpvfz1vBeFdp0U6CKx2a4P9Le8dbL1CQaAlYQEALw_wcB">“Dart 시작하기”</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Dart/">Dart</category>
      
      
      <category domain="https://keunbit.blog/tags/Dart/">Dart</category>
      
      <category domain="https://keunbit.blog/tags/Flutter/">Flutter</category>
      
      <category domain="https://keunbit.blog/tags/Application/">Application</category>
      
      <category domain="https://keunbit.blog/tags/Web/">Web</category>
      
      <category domain="https://keunbit.blog/tags/Front/">Front</category>
      
      
      <comments>https://keunbit.blog/2023/01/12/programming/dart/dart_tutorial-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>06. 클래스(Class)와 객체지향 다루기</title>
      <link>https://keunbit.blog/2022/04/02/programming/python/python-06/</link>
      <guid>https://keunbit.blog/2022/04/02/programming/python/python-06/</guid>
      <pubDate>Sat, 02 Apr 2022 00:18:08 GMT</pubDate>
      
      <description>&lt;p&gt;안녕하세요 이전 &lt;a href=&quot;https://keunbit.blog/2022/03/22/python-05/&quot;&gt;포스팅&lt;/a&gt; 애서는 &lt;strong&gt;&lt;em&gt;Pyhton&lt;/em&gt;&lt;/strong&gt; 코드를 작성할 때 반복적인 작업, 기능 등을 수행하는 단위를 함수로 정의해서 다루는 것에 대해서 얘기를 나눠봤는데요.&lt;/p&gt;
&lt;p&gt;이번 포스팅에서는 정말 중요한 &lt;strong&gt;&lt;em&gt;객체 지향 프로그래밍(Object-Oriented Programming), 클래스(Class)와 객체(Object)&lt;/em&gt;&lt;/strong&gt; 의 개념 그리고 실제 이것을 구현하는 방법에 대해서 다뤄보려고 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체 지향 프로그래밍&lt;/li&gt;
&lt;li&gt;클래스와 인스턴스&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요 이전 <a href="https://keunbit.blog/2022/03/22/python-05/">포스팅</a> 애서는 <strong><em>Pyhton</em></strong> 코드를 작성할 때 반복적인 작업, 기능 등을 수행하는 단위를 함수로 정의해서 다루는 것에 대해서 얘기를 나눠봤는데요.</p><p>이번 포스팅에서는 정말 중요한 <strong><em>객체 지향 프로그래밍(Object-Oriented Programming), 클래스(Class)와 객체(Object)</em></strong> 의 개념 그리고 실제 이것을 구현하는 방법에 대해서 다뤄보려고 합니다.</p><ul><li>객체 지향 프로그래밍</li><li>클래스와 인스턴스</li></ul><span id="more"></span><h3 id="객체-지향-프로그래밍"><a href="#객체-지향-프로그래밍" class="headerlink" title="객체 지향 프로그래밍"></a><strong>객체 지향 프로그래밍</strong></h3><p>늘 강조하는 것이지만, 객체 지향 프로그래밍이 <strong><em>왜(Why)</em></strong> 중요한지 그리고 <strong><em>무엇(What)</em></strong> 을 객체 지향 프로그래밍이라고 하는지에 대해서 잠시 짚고 넘어가도록 하겠습니다.</p><h4 id="정의"><a href="#정의" class="headerlink" title="정의"></a><strong>정의</strong></h4><blockquote><p>컴퓨터 프로그래밍의 패러다임 중 하나로, <strong><em>필요한 데이터를 추상화</em></strong> 시켜 <strong><em>속성(Attribute)</em></strong> 과 <strong><em>행위(Behavior)</em></strong> 를 가진 <strong><em>객체</em></strong> 를 <strong><em>최소한의 단위</em></strong> 로 만들고, 이러한 객체들 간의 <strong><em>유기적인 상호작용</em></strong> 을 할 수 있도록 <strong><em>로직</em></strong> 을 구성하는 프로그래밍 방법</p></blockquote><p>여기에서 <strong><em>추상화</em></strong> 와 <strong><em>최소한의 단위</em></strong> 표현에 대해서 애매하게 다가오실 수 있을 것 같은데요. 좀 더 설명 드리자면,</p><ul><li><p><strong><em>추상화</em></strong> 란, <strong>공통의 속성이나 기능을 묶어 이름을 붙이는 것</strong> 을 뜻하는데요. 예를 들면, ‘사자’, ‘호랑이’, ‘표범’ 들을 ‘육식동물’ 이라고 묶어서 이름을 붙이는 것이죠. 프로그래밍 관점에서는 ‘클래스를 만들고 설계하는 것 자체’를 뜻합니다.</p></li><li><p><strong><em>최소한의 단위</em></strong> 라고 표현한 이유는 이전 <a href="https://keunbit.blog/2022/03/23/programming-wiki-01/">클린코드 작성법</a> 에서 함수를 설계할 때 최소한의 기능 단위로 정의를 하는 것이 좋다고 설명드렸습니다. 이러한 방식은 우리가 클래스(Class)를 정의하는 것에도 비슷하게 적용됩니다.</p><p>우선 <strong><em>결합도</em></strong> 와 <strong><em>응집도</em></strong> 에 대한 개념을 잠시 짚어 보겠습니다.</p><ul><li><strong><em>결합도</em></strong> 란, <U>모듈(클래스, 함수) 간의 상호 의존 정도</U>를 나타내는 지표를 뜻합니다 <strong>&#x3D;&gt;</strong> <strong>결합도가 낮으면 모듈간의 상호 의존성이 줄어들어 객체의 재사용 및 유지보수가 용이해집니다.</strong></li><li><strong><em>응집도</em></strong> 란, 하나의 모듈 내부에 존재하는 <U>구성 요소들의 기능적 관련성</U>을 뜻합니다 <strong>&#x3D;&gt;</strong> <strong>응집도가 높은 모듈은 하나의 책임(기능 수행)에 집중하고 독립성이 높아져, 재사용 및 유지보수가 용이해집니다.</strong></li></ul><p>즉 좋은 객체 지향 설계는 <strong>결합도는 낮추고 응집도는 높이는 것</strong> 입니다. 하지만, 이렇게 객체 지향적인 코딩을 하다보면 이 둘은 <code>트레이드오프(trade-off)</code>관계라는 것을 알 수 있을 텐데요. 그래서 저는 이 둘의 <code>트레이드오프</code>를 잘 조절한 것을 <strong>최소한의 단위</strong> 로 표현한 것입니다.</p><p>지금 당장은 와닿지 않는 표현들이라 생각됩니다. 지금 당장은 아니더라도 앞으로 코딩을 하면서 차차 알아가실 내용이기에 이쯤에서 정리하도록 하죠.</p></li></ul><h4 id="장-단점"><a href="#장-단점" class="headerlink" title="장,단점"></a><strong>장,단점</strong></h4><p>객체 지향 프로그래밍 설계의 장,단점 당연한 얘기겠지만 빠르게 정리하고 넘어가죠</p><ul><li><strong>장점</strong><ul><li>코드 재사용이 용이</li><li>유지보수가 쉬움</li><li>복잡한, 대형 프로젝트에 필수적</li></ul></li><li><strong>단점</strong><ul><li>설계시 많은 시간과 노력이 필요</li></ul></li></ul><p>사실 단점을 적기에도 애매합니다. 객체 지향 설계는 이제는 필수에 가까우며, 당연히 알아야할 개념이자, 앞으로 우리가 코딩을 할 때 지향해야할 것이라고 감히 말씀드리고 싶습니다.</p><h4 id="정리해보면"><a href="#정리해보면" class="headerlink" title="정리해보면..."></a><strong>정리해보면...</strong></h4><p>우리가 어떤 어플리케이션을 개발할 때 모듈, 단위, 기능에 맞춰서 여러 클래스(Class)들을 정의하며(객체를 생성하며) 여기서 객체들은 각각이 <U>수행하는 역할이 있을 것이고(응집도)</U>, 객체간 <U>상호작용을 히먀 의존성을 가지게 되는데(결합도)</U> 이러한 응집도와 결합도 라는 것은 트레이드오프 관계에 있어 <U>결합도는 최소화하고 응집도는 최대화 하는 단위를 적절히 배분하여 설계</U>하는 것이 좋은 객체 지향 프로그래밍이라 할 수 있는 것입니다.</p><h3 id="클래스-Class-와-인스턴스-Instance"><a href="#클래스-Class-와-인스턴스-Instance" class="headerlink" title="클래스(Class) 와 인스턴스(Instance)"></a><strong>클래스(Class) 와 인스턴스(Instance)</strong></h3><h4 id="클래스와-인스턴스"><a href="#클래스와-인스턴스" class="headerlink" title="클래스와 인스턴스"></a><strong>클래스와 인스턴스</strong></h4><p>그러면 클래스와 인스턴스 차이를 알아보겠습니다. 코드를 보면 바로 이해가 되실 것 같습니다.</p><figure class="highlight python"><figcaption><span>클래스와 인스턴스 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;안녕하세요. <span class="subst">&#123;self.name&#125;</span> 입니다!&quot;</span>)</span><br><span class="line"></span><br><span class="line">user1 = User(<span class="string">&quot;대환&quot;</span>)</span><br><span class="line">user2 = User(<span class="string">&quot;우현&quot;</span>)</span><br></pre></td></tr></table></figure><p>간단합니다. 우리가 함수를 정의할 때 앞에 <code>def</code>를 사용해서 정의했듯이, 클래스를 정의할 때 앞에 <code>class</code>를 사용해 정의합니다. 그래서 <code>User</code>는 클래스가 되는 것이구요. <code>user1</code>, <code>user2</code>는 인스턴스 입니다. 글로 정리해보면,</p><ul><li>클래스(Class) : <strong><em>속성(Attribute)</em></strong> 과 <strong><em>행위(Behavior)</em></strong> 를 <U>변수(Variable)</U>와 <U>함수(Function)</U>로 정의한 것</li><li>인스턴스(Instance): 클래스에서 정의한 것을 토대로 <strong><em>실제 메모리에 할당</em></strong> 된 것</li></ul><p>이렇게 정리할 수 있겠네요.</p><blockquote><p>Tip! 파이썬에서 클래스(Class)를 네이밍 할 때 <strong>PascalCase</strong> 로 작성합니다. <span style="color:grey">ex) ClassName, BertTokenizer</span></p></blockquote><p>자, 위 예시에서 <code>__init__</code>, <code>self</code> 에 대해서 궁금하실 것 같은데요.</p><h4 id="init"><a href="#init" class="headerlink" title="__init__"></a><strong>__init__</strong></h4><p><strong>__init__</strong> 메서드는 클래스 생성시 자동으로 호출되는데, 우선 <strong>__init__</strong> 이 없을 때를 보면,</p><figure class="highlight python"><figcaption><span>__init__ 메서드가 없을 때 객체 속성을 지정하는 방법</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">user1 = User()</span><br><span class="line">user1.initialize(<span class="string">&quot;대환&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(user1.name)</span><br></pre></td></tr></table></figure><pre><code>대환</code></pre><figure class="highlight python"><figcaption><span>__init__ 메서드가 있다면</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">user1 = User(<span class="string">&quot;대환&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(user1.name)</span><br></pre></td></tr></table></figure><pre><code>대환</code></pre><p><strong>__init__</strong> 메서드가 있으면 객체를 생성할 때 넘겨주면 되므로 훨씬 간단해지죠. 이러한 장점 때문에 보통 클래스를 만들 땐 항상 <strong>__init__</strong> 메서드를 같이 정의해줍니다.</p><h4 id="str"><a href="#str" class="headerlink" title="__str__"></a><strong>__str__</strong></h4><p><strong>__init__</strong> 에 대해서 알아본 김에 <strong>__str__</strong> 도 빠르게 짚고 넘어가죠. 인스턴스를 <code>print()</code>했을 때 원하는 값이 나오게 하려면 <strong>str</strong> 메서드를 사용할 수 있다.</p><figure class="highlight python"><figcaption><span>__str__ 메서드가 있다면</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;안녕하세요 저의 이름은 <span class="subst">&#123;self.name&#125;</span> 입니다.&quot;</span></span><br><span class="line"></span><br><span class="line">user1 = User(<span class="string">&quot;대환&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(user1)</span><br></pre></td></tr></table></figure><pre><code>안녕하세요 저의 이름은 대환 입니다.</code></pre><blockquote><p>Tip! 클래스(Class) 내부의 함수는 메서드라는 표현을 사용한다. <span style="color:grey">위 예시에서 say_hello, initialize 를 메서드라 부른다.</span></p></blockquote><h4 id="self"><a href="#self" class="headerlink" title="self"></a><strong>self</strong></h4><p>인스턴스가 메서드를 호출할 때 자기 자신이 항상 첫번째 인자로 들어가는데 예시와 그림을 보겠습니다.</p><figure class="highlight python"><figcaption><span>self의 의미</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, email</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.email = email</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;이름은 <span class="subst">&#123;self.name&#125;</span> 이고, 이메일은 <span class="subst">&#123;self.email&#125;</span> 입니다.&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">change_info</span>(<span class="params">self, new_name, new_email</span>):</span><br><span class="line">        self.name = new_name</span><br><span class="line">        self.email = new_email</span><br><span class="line"></span><br><span class="line">user1 = User(<span class="string">&#x27;대환&#x27;</span>, <span class="string">&#x27;daehwan@example.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(user1)</span><br><span class="line">user1.change_info(<span class="string">&#x27;대퐝&#x27;</span>, <span class="string">&#x27;daefwang@example.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(user1)</span><br></pre></td></tr></table></figure><pre><code>이름은 대환 이고, 이메일은 daehwan@example.com 입니다.이름은 대퐝 이고, 이메일은 daefwang@example.com 입니다.</code></pre><img src="/2022/04/02/programming/python/python-06/self_image.svg" class="center_img"><p>이렇게 인스턴스가 메서드를 호출할 땐 자기 자신이 첫번째 인자로 넘어가기 때문에 메서드를 정의할 때 첫 파라미터로 <strong>self</strong> 를 넣어주는 것이죠. 꼭 <strong>self</strong> 가 아니라 다른 것을 사용해도 되지만 파이썬 개발자 간의 관례, 규칙이므로 <strong>self</strong> 라고 사용해주는 것이 좋습니다.</p><h3 id="상속-Inheritance-과-오버라이딩-Overriding"><a href="#상속-Inheritance-과-오버라이딩-Overriding" class="headerlink" title="상속(Inheritance)과 오버라이딩(Overriding)"></a><strong>상속(Inheritance)과 오버라이딩(Overriding)</strong></h3><h4 id="상속-Inheritance"><a href="#상속-Inheritance" class="headerlink" title="상속(Inheritance)"></a><strong>상속(Inheritance)</strong></h4><p>상속은 우리가 일상생활에서 사용하는 상속이라는 의미로 생각하시면 좋을 것 같습니다. 클래스로 비유하면, 다른 클래스의 기능, 변수 등을 새로운 클래스에 상속, 물려받도록 하는 것이죠. 코드 보겠습니다.</p><figure class="highlight python"><figcaption><span>CalculatorBasic 클래스 정의</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CalculatorBasic</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">self, num1, num2</span>):</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">self, num1, num2</span>):</span><br><span class="line">        <span class="keyword">return</span> num1 - num2</span><br><span class="line"></span><br><span class="line">cal_basic = CalculatorBasic()</span><br><span class="line"><span class="built_in">print</span>(cal_basic.<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(cal_basic.sub(<span class="number">10</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>128</code></pre><figure class="highlight python"><figcaption><span>CalculatorBasic을 상속받은 CalculatorHard 정의</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CalculatorHard</span>(<span class="title class_ inherited__">CalculatorBasic</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, num1, num2</span>):</span><br><span class="line">        <span class="keyword">return</span> num1 * num2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">self, num1, num2</span>):</span><br><span class="line">        <span class="keyword">return</span> num1 / num2</span><br><span class="line"></span><br><span class="line">cal_hard = CalculatorHard()</span><br><span class="line"><span class="built_in">print</span>(cal_hard.<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(cal_hard.sub(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(cal_hard.mul(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(cal_hard.div(<span class="number">10</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>128205.0</code></pre><p>위 예시를 보면 <strong>상속</strong> 의 의미를 확실히 이해하셨을 것 같습니다. <code>CalculatorHard</code> 를 정의할 때 <code>sum</code>, <code>sub</code> 메서드를 정의하지 않았음에도 사용할 수 있는 이유는 <code>CalculatorBasic</code> 클래스의 기능을 상속 받았기 때문이죠.</p><p>여기서 <strong>CalculatorBasic 은 부모클래스(Super Class), CalculatorHard 는 자식클래스(Sub Class)가 되는 것</strong> 입니다.</p><h4 id="오버라이딩-Overriding"><a href="#오버라이딩-Overriding" class="headerlink" title="오버라이딩 (Overriding)"></a><strong>오버라이딩 (Overriding)</strong></h4><p>그러면 오버라이딩에 대해서도 알아보죠. 코드 보겠습니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CalculatorHard</span>(<span class="title class_ inherited__">CalculatorBasic</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">self, num1, num2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">super</span>().<span class="built_in">sum</span>(num1, num2))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;오버라이딩 된 sum: <span class="subst">&#123;num1+num2&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, num1, num2</span>):</span><br><span class="line">        <span class="keyword">return</span> num1 * num2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">self, num1, num2</span>):</span><br><span class="line">        <span class="keyword">return</span> num1 / num2</span><br><span class="line"></span><br><span class="line">cal_hard = CalculatorHard()</span><br><span class="line"><span class="built_in">print</span>(cal_hard.<span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(cal_hard.sub(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(cal_hard.mul(<span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(cal_hard.div(<span class="number">10</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>12오버라이딩 된 sum: 128205.0</code></pre><p>보시는 것처럼 <code>CalculatorHard</code>에서 <code>sum</code> 이라는 함수를 다시 정의했죠. 그리고 기능을 물려준 클래스를 <code>SuperClass</code> 라고 얘기했는데요. <code>super().sum()</code> 을 하게되면 <code>CalculatorBasic</code>의 <code>sum()</code>을 사용할 수 있습니다. 추가로 알아둡시다!</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a><strong>결론</strong></h3><p>이번 포스팅에서는 <strong>객체 지향 프로그래밍이 무엇</strong> 인지, 그리고 어떻게 설계하는 것이 좋은 것인지에 대해서도 얘기를 나눠봤습니다. 그리고 클래스를 정의하는 방법과 그리고 <strong>___init___</strong>, <strong><em>self</em></strong> 에 대한 개념을 잠시 짚고 넘어갔구요. 마지막으로 클래스 <strong>상속</strong>과 <strong>오버라이딩</strong>에 대해서 알아봤습니다. 다음 포스팅에서는 <strong>캡슐화</strong>에 대한 얘기, 그리고 (<strong>_</strong>, <strong>__</strong>) 가 파이썬에서 어떤 의미를 가지는지에 대해서 얘기를 나눠보겠습니다.</p><p><em>이상으로 이번 포스팅은 마치겠습니다. 추가 의견이나 수정이 필요한 부분이 있다면 언제든지 거침없는 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://wikidocs.net/28">위키독스-클래스</a> <a href="https://wikidocs.net/28">https://wikidocs.net/28</a></li><li><a href="https://jeong-pro.tistory.com/95">객체 지향 프로그래밍이 뭔가요?(블로그)</a> <a href="https://jeong-pro.tistory.com/95">https://jeong-pro.tistory.com/95</a></li><li><a href="https://velog.io/@kpl5672/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%A0%80%EB%A6%AC#chapter-1-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0">파이썬 객체지향(OOP) 블로그</a> <a href="https://velog.io/@kpl5672/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%A0%80%EB%A6%AC#chapter-1-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0">https://velog.io/@kpl5672/파이썬-객체지향-저리#chapter-1-객체-지향-프로그래밍-시작하기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/">Python</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/Basic/">Basic</category>
      
      
      <category domain="https://keunbit.blog/tags/Python/">Python</category>
      
      <category domain="https://keunbit.blog/tags/Programming-Language/">Programming Language</category>
      
      
      <comments>https://keunbit.blog/2022/04/02/programming/python/python-06/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Clean Code 작성법</title>
      <link>https://keunbit.blog/2022/03/23/programming/log/log-01/</link>
      <guid>https://keunbit.blog/2022/03/23/programming/log/log-01/</guid>
      <pubDate>Wed, 23 Mar 2022 12:13:37 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;&lt;strong&gt;Intro&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;안녕하세요. 예전애 유튜브채널 &lt;code&gt;노마드코더&lt;/code&gt;에서 &lt;strong&gt;&lt;em&gt;깨끗한 코드를 위한 5가지 팁&lt;/em&gt;&lt;/strong&gt; 을 영상에서 본 후 Python 코드로 변환해서 개인적으로 저장한 것을 블로그에 작성하려고 합니다. 저의 경우 코딩을 할 때 스스로 가져야 할 마인드셋(?)으로 정리하고 있는데요. 공유하면 좋을 것 같아 포스팅 하게 되었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검색이 가능한 이름을 사용하자&lt;/li&gt;
&lt;li&gt;함수명은 반드시 동사로&lt;/li&gt;
&lt;li&gt;짧은 변수명이나 (아무도 이해못하는) 축약어는 피하자&lt;/li&gt;
&lt;li&gt;함수는 단 한가지 기능만 수행하도록&lt;/li&gt;
&lt;li&gt;boolean 값을 인수로 함수에 보내는 것을 최대한 방지하자&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a><strong>Intro</strong></h3><p>안녕하세요. 예전애 유튜브채널 <code>노마드코더</code>에서 <strong><em>깨끗한 코드를 위한 5가지 팁</em></strong> 을 영상에서 본 후 Python 코드로 변환해서 개인적으로 저장한 것을 블로그에 작성하려고 합니다. 저의 경우 코딩을 할 때 스스로 가져야 할 마인드셋(?)으로 정리하고 있는데요. 공유하면 좋을 것 같아 포스팅 하게 되었습니다.</p><ul><li>검색이 가능한 이름을 사용하자</li><li>함수명은 반드시 동사로</li><li>짧은 변수명이나 (아무도 이해못하는) 축약어는 피하자</li><li>함수는 단 한가지 기능만 수행하도록</li><li>boolean 값을 인수로 함수에 보내는 것을 최대한 방지하자</li></ul><span id="more"></span><p><span style="color:red">(<em>물론 코딩스타일에는 정답은 없습니다.</em>)</span></p><h3 id="Clean-Code-5가지"><a href="#Clean-Code-5가지" class="headerlink" title="Clean Code 5가지"></a><strong>Clean Code 5가지</strong></h3><h4 id="1-검색이-가능한-이름을-사용하자"><a href="#1-검색이-가능한-이름을-사용하자" class="headerlink" title="1. 검색이 가능한 이름을 사용하자"></a><strong>1. 검색이 가능한 이름을 사용하자</strong></h4><p>변수 네이밍에 대한 것인데요. 다른 사람이 읽었을 때 바로 이해가 될 수 있도록 작성하자는 것입니다.</p><figure class="highlight python"><figcaption><span>변수명</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*-- <span class="keyword">not</span> good --*</span><br><span class="line"><span class="built_in">print</span>(<span class="number">86400</span>)</span><br><span class="line"></span><br><span class="line">*-- good --*</span><br><span class="line">seconds_in_a_day = <span class="number">86400</span></span><br><span class="line"><span class="built_in">print</span>(seconds_in_a_day)</span><br></pre></td></tr></table></figure><h4 id="2-함수명은-반드시-동사로"><a href="#2-함수명은-반드시-동사로" class="headerlink" title="2. 함수명은 반드시 동사로"></a><strong>2. 함수명은 반드시 동사로</strong></h4><p>변수 네이밍을 잘 하는 것도 중요하듯, 우리가 정의할 함수에 대한 네이밍도 굉장히 중요합니다. 이 함수가 어떤 기능을 수행하는지 밑에 코드를 안보더라도 알 수 있도록 말이죠.</p><figure class="highlight python"><figcaption><span>함수명</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*-- <span class="keyword">not</span> good --*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_data</span>():</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line">data = userData();</span><br><span class="line"></span><br><span class="line">*-- good --*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_user_data</span>()&#123;</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">&#125;</span><br><span class="line">user_data = load_user_data()</span><br></pre></td></tr></table></figure><h4 id="3-짧은-변수명이나-아무도-이해못하는-축약어는-피하자"><a href="#3-짧은-변수명이나-아무도-이해못하는-축약어는-피하자" class="headerlink" title="3. 짧은 변수명이나 (아무도 이해못하는) 축약어는 피하자"></a><strong>3. 짧은 변수명이나 (아무도 이해못하는) 축약어는 피하자</strong></h4><p>함수의 파라미터에 대한 얘기입니다.</p><figure class="highlight python"><figcaption><span>파라미터명</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*-- <span class="keyword">not</span> good --*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user_info</span>(<span class="params">n,p</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">*-- good --*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user_info</span>(<span class="params">name,phone_number</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="4-함수는-단-한가지-기능만-수행하도록"><a href="#4-함수는-단-한가지-기능만-수행하도록" class="headerlink" title="4. 함수는 단 한가지 기능만 수행하도록"></a><strong>4. 함수는 단 한가지 기능만 수행하도록</strong></h4><p>하나의 함수에서 여러가지 기능을 수행하는 것을 되도록 피하자는 것입니다. 기능 단위로 최대한 쪼개서 작성해주는 것이죠.</p><figure class="highlight python"><figcaption><span>함수 쪼개기</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">*-- <span class="keyword">not</span> good --*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_user_data</span>(<span class="params">name, email</span>):</span><br><span class="line">    check_email = re.<span class="built_in">compile</span>(<span class="string">&#x27;^[a-zA-Z0-9+-_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> check_email.match(email) == <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;올바른 이메일 형식이 아닙니다&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;5글자 이하로 작성해주세요&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># process user data</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">*-- good --*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_email</span>(<span class="params">email</span>):</span><br><span class="line">    check_email = re.<span class="built_in">compile</span>(<span class="string">&#x27;^[a-zA-Z0-9+-_.]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> check_email.match(email)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_name_length</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_user_data</span>(<span class="params">name, email</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> check_email(email) == <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;올바른 이메일 형식이 아닙니다&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> check_name_length == <span class="literal">False</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;5글자 이하로 작성해주세요&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># process user data</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>지금처럼 함수를 기능별로 쪼개서 정의하는 것이 가독성도 좋아지고, 코드가 길면 길수록 유지&#x2F;관리 측면에서 더 좋습니다.</p><h4 id="5-boolean-값을-인수로-함수에-보내는-것을-최대한-방지하자"><a href="#5-boolean-값을-인수로-함수에-보내는-것을-최대한-방지하자" class="headerlink" title="5. boolean 값을 인수로 함수에 보내는 것을 최대한 방지하자"></a><strong>5. boolean 값을 인수로 함수에 보내는 것을 최대한 방지하자</strong></h4><p>boolean 값을 함수로 보낸다는 것은 그 함수에 <code>if-else</code>가 있다는 뜻이 됩니다. 차라리 각각의 케이스별로 함수를 분리하는 것이 좋습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*-- <span class="keyword">not</span> good --*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message</span>(<span class="params">text, is_private</span>):</span><br><span class="line">    <span class="keyword">if</span> is_private:</span><br><span class="line">        <span class="comment">## send private message</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">## send public message</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">send_message(<span class="string">&quot;Hello&quot;</span>, <span class="literal">False</span>)</span><br><span class="line">send_message(<span class="string">&quot;This is secret&quot;</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">*-- good --*</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_private_message</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="comment">## send private message</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_public_message</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="comment">## send public message</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">send_public_message(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">send_private_message(<span class="string">&quot;This is secret&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a><strong>결론</strong></h3><p>이번 포스팅에서는 <strong><em>Clean Code 작성법</em></strong> 에 대해서 간단하게 정리해 봤습니다. 다시 한 번 말씀드리지만, 코드 작성에는 정답은 없습니다! 어떤 방법이 됐든, 누가 봐도 보기 쉽고 이해하기 편하게 작성하면 되는 것이니까요. <em>추가로!!! 개발을 시작할 때 처음부터 예쁘게 작성하려고 하기보다는 우선 모든 동작, 기능들을 구현한 후 클린 코드로 다듬어 주는 것도 좋은 순서 입니다!!</em> 우선 이 주제는 여기까지 다뤄보도록 하겠습니다. 또 <strong><em>Pythonic</em></strong> 한 것은 또 느낌이 다르더라구요. <strong><em>Pythonic</em></strong> 한 파이썬 코딩에 대해서는 추후 더 깊게 다뤄보도록 하겠습니다</p><p><em>이상으로 이번 포스팅은 마치겠습니다. 추가 의견이나 수정이 필요한 부분이 있다면 언제든지 거침없는 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://www.youtube.com/watch?v=Jz8Sx1XYb04">‘노마드 코더’ Clean Code를 위한 5가지 팁</a> <a href="https://www.youtube.com/watch?v=Jz8Sx1XYb04">https://www.youtube.com/watch?v=Jz8Sx1XYb04</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/log/">log</category>
      
      
      <category domain="https://keunbit.blog/tags/Clean-Code/">Clean Code</category>
      
      
      <comments>https://keunbit.blog/2022/03/23/programming/log/log-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>05. 함수(Function) 다루기</title>
      <link>https://keunbit.blog/2022/03/22/programming/python/python-05/</link>
      <guid>https://keunbit.blog/2022/03/22/programming/python/python-05/</guid>
      <pubDate>Tue, 22 Mar 2022 12:42:37 GMT</pubDate>
      
      <description>&lt;p&gt;안녕하세요 이전 &lt;a href=&quot;https://keunbit.blog/2022/03/20/python-04/&quot;&gt;포스팅&lt;/a&gt; 애서는 &lt;strong&gt;&lt;em&gt;Pyhton&lt;/em&gt;&lt;/strong&gt; 데이터들을 다룰 때 유용한 반복문(for, while)과 조건문(if)에 대해서 얘기를 나눠봤는데요. 이번 포스팅에서는 프로그래밍의 꽃(?)이라 할 수 있는 함수 정의에 대해서 얘기해보려고 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수(Function) 정의하기&lt;/li&gt;
&lt;li&gt;Parameter vs Arguments 짚고 넘어가기&lt;/li&gt;
&lt;li&gt;lambda 다뤄보기&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요 이전 <a href="https://keunbit.blog/2022/03/20/python-04/">포스팅</a> 애서는 <strong><em>Pyhton</em></strong> 데이터들을 다룰 때 유용한 반복문(for, while)과 조건문(if)에 대해서 얘기를 나눠봤는데요. 이번 포스팅에서는 프로그래밍의 꽃(?)이라 할 수 있는 함수 정의에 대해서 얘기해보려고 합니다.</p><ul><li>함수(Function) 정의하기</li><li>Parameter vs Arguments 짚고 넘어가기</li><li>lambda 다뤄보기</li></ul><span id="more"></span><h3 id="함수-Function-정의하기"><a href="#함수-Function-정의하기" class="headerlink" title="함수(Function) 정의하기"></a><strong>함수(Function) 정의하기</strong></h3><h4 id="왜-Why"><a href="#왜-Why" class="headerlink" title="왜(Why)?"></a><strong>왜(Why)?</strong></h4><p>먼저 바로 함수 작성하는 방법을 설명드리기전에 왜(why) 함수를 사용하는지부터 얘기해보죠.</p><ol><li>간결한 코드 작성이 용이해진다.</li><li>한 번 작성한 함수는 재사용이 가능하다.</li><li>가독성, 코드 유지관리가 쉬워진다.</li><li>등…</li></ol><p>사실 함수를 사용하면 정말 많은 장점이 존재합니다. 그리고 그 장점 끝에는 <strong><em>“코드 작성자 &amp; 팀원과 공유할 때 커뮤니케이션이 원활해진다.”</em></strong> 로 이어집니다. 그럼 이제 본격적으로 함수를 어떻게 작성하는지부터 얘기를 해보겠습니다.</p><h4 id="함수-작성법"><a href="#함수-작성법" class="headerlink" title="함수 작성법"></a><strong>함수 작성법</strong></h4><p>파이썬에서는 함수를 정의할 때 다음과 같이 정의합니다.</p><figure class="highlight python"><figcaption><span>함수 정의 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    result = x+y</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>여기서 <code>def</code> 는 <strong>define(정의하다)</strong> 의 앞 글자를 딴 것인데요. 그리고 <code>add</code>는 우리가 정의한 <strong>함수의 이름</strong> 이 됩니다. 그리고 조건문, 반복문과 같이 함수명 뒤에 <code>콜론(:)</code> 그리고 <code>indent</code>를 해준 뒤 <strong>이 함수가 수행할 코드를 입력</strong> 한 후, 그 결과를 <code>return(반환)</code> 하는 구조입니다.</p><p>즉, 정의한 <strong>함수 add</strong> 는 <strong>두 변수(x,y)를 받아서 더한 값을 반환하는 함수</strong> 입니다.</p><h3 id="Parameter-vs-Arguments-짚고-넘어가기"><a href="#Parameter-vs-Arguments-짚고-넘어가기" class="headerlink" title="Parameter vs Arguments 짚고 넘어가기"></a><strong>Parameter vs Arguments 짚고 넘어가기</strong></h3><p>Parameter와 Arguments의 차이에 대해서 잠깐 짚고 넘어가겠습니다.</p><figure class="highlight python"><figcaption><span>Parameter(매개변수)와 Arguments(인수)의 구분</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    result = x+y</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">z = add(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br></pre></td></tr></table></figure><pre><code>7</code></pre><p>간단합니다.</p><ul><li>Parameter는 함수를 정의할 때 입력으로 전달받는 변수를 의미하고,</li><li>Arguments는 함수를 사용(호출)할 때 입력되는 값을 의미합니다.</li></ul><p>즉, 위 예시코드에서 <strong>x,y는 Parameter(매개변수)</strong> 이고, <strong>3, 4는 Arguments(인수)</strong> 가 되는 것이죠.</p><h3 id="Lambda-다뤄보기"><a href="#Lambda-다뤄보기" class="headerlink" title="Lambda 다뤄보기"></a><strong>Lambda 다뤄보기</strong></h3><p>우리는 <strong><em>Lambda</em></strong> 를 통해 이름이 없는 함수를 만들 수 있습니다. 이름이 없다(?) 이해가 안가실 텐데요. 예시 보겠습니다.</p><figure class="highlight python"><figcaption><span>Lambda 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    result = x+y</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">no_name = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line"><span class="built_in">print</span>(no_name(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> x, y: x + y)(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><pre><code>777</code></pre><p>위 코드에서 <code>lambda</code>를 사용해서 <code>add()</code>와 같은 기능을 수행하는 함수를 정의했습니다. <strong>7번째 줄</strong> 에서는 이름을 정하지 않았다는 것을 보여드리기 위해 임의로 <code>no_name</code>이라는 변수에 담아서 표현을 한 것입니다. 강조드리고 싶은 것은 <strong>10번째 줄</strong> 인데요. <code>lambda</code>를 사용하는 것에는 크게 2가지 장점이 있습니다.</p><ol><li>간결한 코드를 작성할 수 있다.</li><li>메모리 절약</li></ol><p>여기서 저는 장점 1번을 좀 더 강조드리고 싶은데요. 글로 설명할게 아니라 코드로 바로 보겠습니다.</p><h4 id="lambda-활용-예시-sorted"><a href="#lambda-활용-예시-sorted" class="headerlink" title="lambda 활용 예시 - sorted()"></a><strong>lambda 활용 예시 - sorted()</strong></h4><p>sorted 험수는 <code>list</code> 타입의 객체에 내장되어 있는 함수 입니다.</p><figure class="highlight python"><figcaption><span>sorted() 함수 Description</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(iterable, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br><span class="line">- iterable : A sequence (string, <span class="built_in">tuple</span>, <span class="built_in">list</span>) <span class="keyword">or</span> collection (<span class="built_in">set</span>, dictionary, frozen <span class="built_in">set</span>) <span class="keyword">or</span> <span class="built_in">any</span> other iterator.</span><br><span class="line">- reverse (<span class="type">Optional</span>) : If <span class="literal">True</span>, the <span class="built_in">sorted</span> <span class="built_in">list</span> <span class="keyword">is</span> <span class="built_in">reversed</span> (<span class="keyword">or</span> <span class="built_in">sorted</span> <span class="keyword">in</span> descending order). Defaults to <span class="literal">False</span> <span class="keyword">if</span> <span class="keyword">not</span> provided.</span><br><span class="line">- key (<span class="type">Optional</span>) : A function that serves <span class="keyword">as</span> a key <span class="keyword">for</span> the sort comparison. Defaults to</span><br></pre></td></tr></table></figure><p>sorted 함수 파라미터에 대한 설명을 보면, 파라미터 <code>reverse</code> 와 <code>key</code> 는 옵션으로 우리가 정의할 수 있는데요. 만약, 우리가 다루는 <code>list</code> 타입의 데이터를 문자열의 길이가 긴 것부터 정렬해야 한다면? 두가지 방식을 비교해 보겠습니다.</p><figure class="highlight python"><figcaption><span>def 로 함수를 정의했을 때</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="string">&#x27;dddd&#x27;</span>, <span class="string">&#x27;eeeee&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_str_length</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(x)</span><br><span class="line"></span><br><span class="line">new_list_sample = <span class="built_in">sorted</span>(list_sample, key=check_str_length, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(new_list_sample)</span><br></pre></td></tr></table></figure><pre><code>[&#39;eeeee&#39;, &#39;dddd&#39;, &#39;ccc&#39;, &#39;bb&#39;, &#39;a&#39;]</code></pre><figure class="highlight python"><figcaption><span>lambda 로 함수를 정의했을 때</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="string">&#x27;dddd&#x27;</span>, <span class="string">&#x27;eeeee&#x27;</span>]</span><br><span class="line"></span><br><span class="line">new_list_sample = <span class="built_in">sorted</span>(list_sample, key=<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x), reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(new_list_sample)</span><br></pre></td></tr></table></figure><pre><code>[&#39;eeeee&#39;, &#39;dddd&#39;, &#39;ccc&#39;, &#39;bb&#39;, &#39;a&#39;]</code></pre><p>어떤가요? <code>lambda</code>를 사용했을 때 코드가 더 간결해진게 느껴지시나요? 다음 예시 보겠습니다.</p><h4 id="lambda-활용-예시-map"><a href="#lambda-활용-예시-map" class="headerlink" title="lambda 활용 예시 - map()"></a><strong>lambda 활용 예시 - map()</strong></h4><p><code>map</code> 함수는 <code>sorted</code>와 마찬가지로 <code>iterable</code>한 데이터를 받아서 각 요소마다 특정 동작을 수행할 수 있도록 해주는 함수입니다.</p><figure class="highlight python"><figcaption><span>map() 함수 Description</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(function, iterable, ...)</span><br><span class="line">- function : a function that perform some action to each element of an iterable</span><br><span class="line">- iterable : an iterable like sets, lists, tuples, etc</span><br></pre></td></tr></table></figure><p>만약, 위 예시에서 사용했던 <code>list_sample</code>의 요소들을 각 길이값으로 바꿔야하면? 두가지 방식을 비교해 보겠습니다.</p><figure class="highlight python"><figcaption><span>def 로 함수를 정의했을 때</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="string">&#x27;dddd&#x27;</span>, <span class="string">&#x27;eeeee&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_str_length</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(x)</span><br><span class="line"></span><br><span class="line">new_list_sample = <span class="built_in">map</span>(check_str_length, list_sample)</span><br><span class="line"><span class="built_in">print</span>(new_list_sample)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(new_list_sample))</span><br></pre></td></tr></table></figure><pre><code>&lt;map object at 0x7fc0d1304590&gt;[1, 2, 3, 4, 5]</code></pre><figure class="highlight python"><figcaption><span>lambda 로 함수를 정의했을 때</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="string">&#x27;dddd&#x27;</span>, <span class="string">&#x27;eeeee&#x27;</span>]</span><br><span class="line"></span><br><span class="line">new_list_sample = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x), list_sample)</span><br><span class="line"><span class="built_in">print</span>(new_list_sample)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(new_list_sample))</span><br></pre></td></tr></table></figure><pre><code>&lt;map object at 0x7fc0d12e28d0&gt;[1, 2, 3, 4, 5]</code></pre><p>자 여기서 <code>map()</code> 함수가 반환한 것은 <code>object of map class</code> 즉, <code>iterator</code> 이기 떄문에 list()로 감싸주어 형변환을 해준뒤 출력한 것입니다.</p><h4 id="lambda-활용-예시-filter"><a href="#lambda-활용-예시-filter" class="headerlink" title="lambda 활용 예시 - filter()"></a><strong>lambda 활용 예시 - filter()</strong></h4><p><code>filter</code> 함수의 경우 <code>map</code>함수와 가장 자주 비교되서 설명되는 함수입니다. 특정 조건으로 걸러진 요소들을 <strong>새롭게 객체로 만들어 반환</strong> 하는 함수입니다.</p><figure class="highlight python"><figcaption><span>filter() 함수 Description</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">filter</span>(function, iterable</span><br><span class="line">- function : a function</span><br><span class="line">- iterable : an iterable like sets, lists, tuples, etc</span><br></pre></td></tr></table></figure><p>위 예시들을 그대로 사용하겠습니다. 여기서는 길이가 3이상인 것들만 다시 반환하고 싶다면? 두가지 방식을 비교해 보겠습니다.</p><figure class="highlight python"><figcaption><span>def 로 함수를 정의했을 때</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="string">&#x27;dddd&#x27;</span>, <span class="string">&#x27;eeeee&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_three_len</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(x) &gt;= <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">new_list_sample = <span class="built_in">filter</span>(filter_three_len, list_sample)</span><br><span class="line"><span class="built_in">print</span>(new_list_sample)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(new_list_sample))</span><br></pre></td></tr></table></figure><pre><code>&lt;filter object at 0x7fc0d09f80d0&gt;[&#39;ccc&#39;, &#39;dddd&#39;, &#39;eeeee&#39;]</code></pre><figure class="highlight python"><figcaption><span>lambda 로 함수를 정의했을 때</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="string">&#x27;dddd&#x27;</span>, <span class="string">&#x27;eeeee&#x27;</span>]</span><br><span class="line"></span><br><span class="line">new_list_sample = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x) &gt;= <span class="number">3</span>, list_sample)</span><br><span class="line"><span class="built_in">print</span>(new_list_sample)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(new_list_sample))</span><br></pre></td></tr></table></figure><pre><code>&lt;filter object at 0x7fc0d13c33d0&gt;[&#39;ccc&#39;, &#39;dddd&#39;, &#39;eeeee&#39;]</code></pre><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a><strong>결론</strong></h3><p>이번 포스팅에서는 <strong><em>함수</em></strong> 를 주제로 얘기를 해봤는데요. 먼저 <em>어떻게 함수를 정의하는지</em> 에 대해서 얘기를 해봤습니다. 그리고 <strong><em>Parameter</em></strong>, <strong><em>Arguments</em></strong> 차이에 대해서 잠깐 짚고 넘어갔구요. 그리고 일회성 함수로 사용하는 <strong><em>Lambda</em></strong> 작성하는 방법에 대해서 설명드렸습니다. 추가로 <em>lambda</em> 를 활용하는데 있어서 <em>sorted(), map(), filter()</em> 함수까지 알아봤습니다. 사실 위 함수들 같은 경우 <strong><em>for문</em></strong> 을 사용해서 똑같은 결과를 얻는 것 까지 다룰까 했지만, 이 부분은 각자 개인적으로 해보시면서 반복문과 함수에 대해서 개념을 정리해보시길 추천합니다.</p><p><em>이상으로 이번 포스팅은 마치겠습니다. 추가 의견이나 수정이 필요한 부분이 있다면 언제든지 거침없는 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://wikidocs.net/22804">lambda</a> <a href="https://wikidocs.net/22804">https://wikidocs.net/22804</a></li><li><a href="https://www.programiz.com/python-programming/methods/built-in/sorted">sorted</a> <a href="https://www.programiz.com/python-programming/methods/built-in/sorted">https://www.programiz.com/python-programming/methods/built-in/sorted</a></li><li><a href="https://www.programiz.com/python-programming/methods/built-in/map">map</a> <a href="https://www.programiz.com/python-programming/methods/built-in/map">https://www.programiz.com/python-programming/methods/built-in/map</a></li><li><a href="https://www.programiz.com/python-programming/methods/built-in/filter">filter</a> <a href="https://www.programiz.com/python-programming/methods/built-in/filter">https://www.programiz.com/python-programming/methods/built-in/filter</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/">Python</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/Basic/">Basic</category>
      
      
      <category domain="https://keunbit.blog/tags/Python/">Python</category>
      
      <category domain="https://keunbit.blog/tags/Programming-Language/">Programming Language</category>
      
      
      <comments>https://keunbit.blog/2022/03/22/programming/python/python-05/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>04. 제어문 (if, for, while)문</title>
      <link>https://keunbit.blog/2022/03/20/programming/python/python-04/</link>
      <guid>https://keunbit.blog/2022/03/20/programming/python/python-04/</guid>
      <pubDate>Sun, 20 Mar 2022 04:41:13 GMT</pubDate>
      
      <description>&lt;p&gt;안녕하세요 이전 &lt;a href=&quot;https://keunbit.blog/2022/03/18/python-03/&quot;&gt;포스팅&lt;/a&gt; 애서는 &lt;strong&gt;&lt;em&gt;Pyhton&lt;/em&gt;&lt;/strong&gt; 데이터들을 다루는데 있어서 4가지 형태 &lt;strong&gt;&lt;em&gt;List, Tuple, Dictionary, Set&lt;/em&gt;&lt;/strong&gt; 에 대해서 다뤄봤는데요. 이번 포스팅에서는 이러한 데이터들을 특정 조건에 따라 변환시키는 작업, 즉 데이터를 직접적으로 제어하는 방법에 대해서 얘기를 나눠보려고 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if (조건문)&lt;/li&gt;
&lt;li&gt;while (반복문)&lt;/li&gt;
&lt;li&gt;for (반복문)&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요 이전 <a href="https://keunbit.blog/2022/03/18/python-03/">포스팅</a> 애서는 <strong><em>Pyhton</em></strong> 데이터들을 다루는데 있어서 4가지 형태 <strong><em>List, Tuple, Dictionary, Set</em></strong> 에 대해서 다뤄봤는데요. 이번 포스팅에서는 이러한 데이터들을 특정 조건에 따라 변환시키는 작업, 즉 데이터를 직접적으로 제어하는 방법에 대해서 얘기를 나눠보려고 합니다.</p><ul><li>if (조건문)</li><li>while (반복문)</li><li>for (반복문)</li></ul><span id="more"></span><h3 id="if문"><a href="#if문" class="headerlink" title="if문"></a><strong>if문</strong></h3><p>굉장히 직관적이지 않나요. 보통은 반복문과 함께 쓰이기 때문에 한 가지 예시만 보고 빠르게 넘어가죠.</p><figure class="highlight python"><figcaption><span>if문 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span> - 짝수입니다&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;num&#125;</span> - 홀수입니다.&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>4은 짝수입니다</code></pre><p>조건문 다음에는 항상 <strong>콜론 <code>:</code></strong> 을 붙여서 구분을 해주는 것과 그리고 수행할 코드는 <code>space 4 or 2칸</code>의 <strong>Indent</strong> 를 준다는 것을 <strong><em>반드시</em></strong> 기억하기 바랍니다. <code>num % 2 == 0</code> 에서 <code>%</code>는 <a href="https://keunbit.blog/2022/03/17/python-01/">자료형과 연산</a> 포스팅에서 보셨을 텐데요, 이 식은 짝수(2로 나눴을 때 나머지가 0)를 판별하는 조건식입니다. 여기서 <code>==</code> 연산자는 비교 연산자 중 하나인데요. (<strong>&lt;,&gt;,&lt;&#x3D;,&gt;&#x3D;,&#x3D;&#x3D;,!&#x3D;</strong>) 비교 연산자에 대해서 몇가지 재밌는(?) 예시를 짚고 넘어가겠습니다.</p><figure class="highlight python"><figcaption><span>비교연산자 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;3&quot;</span></span><br><span class="line">b = <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;a&#125;</span>&#x27; &gt; &#x27;<span class="subst">&#123;b&#125;</span>&#x27;의 결과는 <span class="subst">&#123;a &gt; b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;a&#125;</span>&#x27; &lt; &#x27;<span class="subst">&#123;b&#125;</span>&#x27;의 결과는 <span class="subst">&#123;a &lt; b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;가&quot;</span></span><br><span class="line">b = <span class="string">&quot;나&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;a&#125;</span>&#x27; &gt; &#x27;<span class="subst">&#123;b&#125;</span>&#x27;의 결과는 <span class="subst">&#123;a &gt; b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;a&#125;</span>&#x27; &lt; &#x27;<span class="subst">&#123;b&#125;</span>&#x27;의 결과는 <span class="subst">&#123;a &lt; b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;2022-03-20&quot;</span></span><br><span class="line">b = <span class="string">&quot;2021-03-19&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;a&#125;</span>&#x27; &gt; &#x27;<span class="subst">&#123;b&#125;</span>&#x27;의 결과는 <span class="subst">&#123;a &gt; b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;a&#125;</span>&#x27; &lt; &#x27;<span class="subst">&#123;b&#125;</span>&#x27;의 결과는 <span class="subst">&#123;a &lt; b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;2022-23-20&quot;</span></span><br><span class="line">b = <span class="string">&quot;2022-03-19&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;a&#125;</span>&#x27; &gt; &#x27;<span class="subst">&#123;b&#125;</span>&#x27;의 결과는 <span class="subst">&#123;a &gt; b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;a&#125;</span>&#x27; &lt; &#x27;<span class="subst">&#123;b&#125;</span>&#x27;의 결과는 <span class="subst">&#123;a &lt; b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>&#39;3&#39; &gt; &#39;4&#39;의 결과는 False&#39;3&#39; &lt; &#39;4&#39;의 결과는 True&#39;가&#39; &gt; &#39;나&#39;의 결과는 False&#39;가&#39; &lt; &#39;나&#39;의 결과는 True&#39;2022-03-20&#39; &gt; &#39;2021-03-19&#39;의 결과는 True&#39;2022-03-20&#39; &lt; &#39;2021-03-19&#39;의 결과는 False&#39;2022-23-20&#39; &gt; &#39;2022-03-19&#39;의 결과는 True&#39;2022-23-20&#39; &lt; &#39;2022-03-19&#39;의 결과는 False</code></pre><p>얼핏 보면, String 타입의 ‘숫자’, ‘한글’, ‘날짜’ 가 마치 파이썬이 날짜와 숫자의 의미를 인식해서 비교를 하는 것처럼 보이지만, 사실은 그렇지 않습니다. 파이썬은 <strong><em>lexicographicaly</em></strong> 하게 비교 결과를 내뱉고 있는 것입니다(맨 밑 예시). <a href="https://stackoverflow.com/questions/31350373/comparing-date-strings-in-python">관련 글</a>은 Reference에 적어두겠습니다.</p><h3 id="while문"><a href="#while문" class="headerlink" title="while문"></a><strong>while문</strong></h3><p>이제 반복문에 대해서 알아보겠습니다. 우선 예시를 하나 들어보죠.</p><figure class="highlight python"><figcaption><span>while문 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure><pre><code>01234</code></pre><p>여기서 <code>num &lt; 5</code> 는 while의 <strong>조건문</strong> 으로 들어갑니다. 해당 조건문이 참(True)일 때 밑에 식이 동작하는데요. <strong>주의</strong> 하실게 만약 <code>num += 1</code> 줄이 없다면 <strong>무한loop</strong> 에 빠지게 됩니다. 사실 그렇기 때문에 특별히 신경을 써줘야 합니다. (<del>그래서 저는 while 보다는 for문을 주로 사용합니다.</del>) while문은 빠르게 넘어가겠습니다. for문에서 설명하고 싶은게 더 많거든요.</p><h3 id="for문"><a href="#for문" class="headerlink" title="for문"></a><strong>for문</strong></h3><p>for 문의 기본 형태부터 보도록 하겠습니다.</p><figure class="highlight python"><figcaption><span>for문 기본 형태 - 1. 리스트, 튜플, 딕셔너리, 셋</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 <span class="keyword">in</span> (리스트, 튜플, 딕셔너리, 셋):</span><br><span class="line">    <span class="built_in">print</span>(변수)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>for문 기본 형태 - 2. range() 함수 활용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(변수)</span><br></pre></td></tr></table></figure><pre><code>01234</code></pre><p>먼저 for문과 많이 사용되는 range() 함수에 대해서 가볍게 정리해보고 넘어가겠습니다.</p><figure class="highlight python"><figcaption><span>range() parameter(start, stop, step)에 대한 설명</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, stop, step)</span><br><span class="line"></span><br><span class="line">- start: 시작할 숫자</span><br><span class="line">    - 생략 가능 (default=<span class="number">0</span>)</span><br><span class="line">    - 정수 입력</span><br><span class="line"></span><br><span class="line">- stop: 이전까지 반복</span><br><span class="line">    - 생략 불가</span><br><span class="line">    - 정수 입력</span><br><span class="line"></span><br><span class="line">- step: 반복시 i에 더할 값 (=보폭을 어떻게 할 것인가?)</span><br><span class="line">    - 생략 가능 (default=<span class="number">0</span>)</span><br><span class="line">    - 정수 입력 (음수 입력시 역순으로 반복)</span><br></pre></td></tr></table></figure><p>백문이불여일견! 몇가지 예시를 보고 빠르게 넘어가죠.</p><figure class="highlight python"><figcaption><span>range(start, stop, step) 간단 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><pre><code>for i in range(5)01234for i in range(1,5)1234for i in range(1,5,2)13for i in range(5, 0, -1)54321</code></pre><p>그리고 <strong>리스트(List), 튜플(Tuple), 딕셔너리(Dictionary), 셋(set)</strong> 으로 이루어진 데이터를 for문으로 출력했을 때 어떤지 보면서 정리 한 번 하겠습니다.</p><figure class="highlight python"><figcaption><span>리스트 for문</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_sample:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><pre><code>12345</code></pre><figure class="highlight python"><figcaption><span>튜플 for문</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple_sample = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuple_sample:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><pre><code>12345</code></pre><figure class="highlight python"><figcaption><span>셋 for문</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set_sample = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> set_sample:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><pre><code>12345</code></pre><figure class="highlight python"><figcaption><span>딕셔너리 for문</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_sample = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dict_sample:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><pre><code>key1key2key3</code></pre><p><strong>딕셔너리(Dictionary)</strong> 에 대한 for문을 잠시 보겠습니다. Dictionary 타입의 객체는 데이터를 조회하는데 몇가지 기능을 제공합니다. 한 번 보시죠.</p><figure class="highlight python"><figcaption><span>딕셔너리(Dictionary) 함수 - get(), keys(), values(), items()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_sample.get(<span class="string">&#x27;key1&#x27;</span>) <span class="comment"># key값으로 조회</span></span><br><span class="line">dict_sample.keys() <span class="comment"># key값들만 가져오기</span></span><br><span class="line">dict_sample.values() <span class="comment"># value값들만 가져오기</span></span><br><span class="line">dict_sample.items() <span class="comment"># 한 쌍의 (key, value)를 리스트로 형변환 해서 가져오기</span></span><br></pre></td></tr></table></figure><pre><code>dict_sample.get(&#39;key1&#39;)-&gt; value1dict_sample.keys()-&gt; dict_keys([&#39;key1&#39;, &#39;key2&#39;, &#39;key3&#39;])dict_sample.values()-&gt; dict_values([&#39;value1&#39;, &#39;value2&#39;, &#39;value3&#39;])dict_sample.items()-&gt; dict_items([(&#39;key1&#39;, &#39;value1&#39;), (&#39;key2&#39;, &#39;value2&#39;), (&#39;key3&#39;, &#39;value3&#39;)])</code></pre><p>그러면 딕셔너리의 items() 함수를 사용해서 for문을 통해 key, value 를 동시에 출력해보겠습니다.</p><figure class="highlight python"><figcaption><span>for문 - 딕셔너리 items() 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dict_sample.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dict_sample.items():</span><br><span class="line">    <span class="built_in">print</span>(item, item[<span class="number">0</span>], item[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>key1 value1key2 value2key3 value3(&#39;key1&#39;, &#39;value1&#39;) key1 value1(&#39;key2&#39;, &#39;value2&#39;) key2 value2(&#39;key3&#39;, &#39;value3&#39;) key3 value3</code></pre><p>여기서 <code>for</code> 와 <code>in</code> 사이에 들어가는 <code>변수</code>는 반복할 데이터의 특징에 따라 상황에 맞게 핸들링할 수 있다는 것 기억해두시기 바랍니다. (<em>+ 어떤 변수명을 쓰던지 개발자 마음이니 변수 네이밍은 개발자의 마음입니다.</em>)</p><h3 id="for문-좀-더-활용하기-zip-enumerate-break-continue"><a href="#for문-좀-더-활용하기-zip-enumerate-break-continue" class="headerlink" title="for문 좀 더 활용하기 - zip, enumerate, break, continue"></a><strong>for문 좀 더 활용하기 - zip, enumerate, break, continue</strong></h3><p>자, 그러면 이제 for문에서 몇가지 좀 더 고급(?)기능들을 살펴보겠습니다.</p><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a><strong>zip</strong></h4><p>우선 zip에 대해서 알아보겠습니다. zip은 여러 2개이상의 데이터들을 동시에 for문에 돌릴 때 사용합니다.</p><figure class="highlight python"><figcaption><span>for문 - zip 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">tuple_sample = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">set_sample = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _l, _t, _s <span class="keyword">in</span> <span class="built_in">zip</span>(list_sample, tuple_sample, set_sample):</span><br><span class="line">    <span class="built_in">print</span>(_l, _t, _s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _z <span class="keyword">in</span> <span class="built_in">zip</span>(list_sample, tuple_sample, set_sample):</span><br><span class="line">    <span class="built_in">print</span>(_z, _z[<span class="number">0</span>], _z[<span class="number">1</span>], _z[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><pre><code>1 1 12 2 23 3 34 4 4(1, 1, 1) 1 1 1(2, 2, 2) 2 2 2(3, 3, 3) 3 3 3(4, 4, 4) 4 4 4</code></pre><p>여기서 한 가지. <code>list_sample</code>의 길이는 6인데 출력되는 것은 <strong>길이가 제일 짧은 데이터<code>(set_sample)</code>를 기준으로 반복</strong> 한다는 것입니다.</p><h4 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a><strong>enumerate</strong></h4><p>enumerate의 경우 for문 도는 것에 대해서 자체적으로 index를 생성해주는 기능입니다. 예시 보겠습니다.</p><figure class="highlight python"><figcaption><span>for문 - enumerate 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(list_sample):</span><br><span class="line">    <span class="built_in">print</span>(idx, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(dict_sample.items()):</span><br><span class="line">    <span class="built_in">print</span>(idx, item)</span><br></pre></td></tr></table></figure><pre><code>0 11 22 33 44 50 (&#39;key1&#39;, &#39;value1&#39;)1 (&#39;key2&#39;, &#39;value2&#39;)2 (&#39;key3&#39;, &#39;value3&#39;)</code></pre><p>나중에 데이터를 핸들링 하실 때 해당 데이터의 <code>index</code> 값을 동시에 활용할 수 있는 것은 굉장히 유용하니 반드시 기억해두시기 바랍니다.</p><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a><strong>continue</strong></h4><p>반복문을 사용하다보면, 특정 조건에 맞으면 더이상 반복을 중단하고 싶을 때가 생깁니다. 리소스를 절약하는 차원에서 그렇죠. 반복문을 중단하는 방법에는 2가지가 있는데요. 그 두가지의 차이를 한 번 보겠습니다.</p><figure class="highlight python"><figcaption><span>continue 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;특정 )</span></span><br><span class="line"><span class="string">    print(f&quot;j=&#123;j&#125;&quot;)</span></span><br></pre></td></tr></table></figure><pre><code>j=0j=1j=3j=4</code></pre><p>위 코드를 보면 <code>if j == 2</code> 라는 조건일 때 <code>continue</code> 를 작성했습니다. 그 결과 <strong>조건을 충족하면 그 밑에 코드들을 더이상 실행하지 않는다</strong> 는 것 확인할 수 있습니다.</p><h4 id="break"><a href="#break" class="headerlink" title="break"></a><strong>break</strong></h4><figure class="highlight python"><figcaption><span>break 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;j=<span class="subst">&#123;j&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>j=0j=1</code></pre><p><code>break</code>의 경우 <strong>조건을 충족하면 더이상 반복을 하지 않는다</strong> 는 것을 확인할 수 있습니다.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>이번 포스팅에서는 조건문(if), 반복문(while, for)에 대해서 알아봤는데요. remind 해보겠습니다.</p><ul><li>조건문, 반복문에서 끝은 항상 <strong>콜론(:)</strong> 을 붙여주고 그 뒤에 작동하는 코드는 <strong>space 4 or 2 칸의 Indent</strong> 를 넣어준다</li><li>for문은 리스트, 튜플, 딕셔너리, 셋의 데이터 타입 모두 사용이 가능하다.</li><li>for 와 in 사이의 변수의 이름은 개발자 마음대로 작성하며, 데이터의 형태에 따라 인자를 설정할 수 있다. <em>(ex) for i,v in enumcerate(sample_list):</em></li><li>for문에서는 zip, enumerate, continue, break 등의 몇가지 유용환 활용 기능들이 존재한다.</li></ul><p>여기까지 정리하겠습니다. 꼭 반드시 암기할 필요는 없습니다. <strong>‘이러한 기능이 존재한다’만 기억해두고 필요할 때 구글링해서 코딩하는게 국룰</strong> 이니까요. (<del>물론 제생각…</del>)</p><p>다음 포스팅은 <strong>함수 정의</strong> 에 대해서 얘기해보겠습니다.</p><p><em>이상으로 이번 포스팅은 마치겠습니다. 추가 의견이나 수정이 필요한 부분이 있다면 언제든지 거침없는 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://stackoverflow.com/questions/31350373/comparing-date-strings-in-python">Compare string date in Python</a> <a href="https://stackoverflow.com/questions/31350373/comparing-date-strings-in-python">https://stackoverflow.com/questions/31350373/comparing-date-strings-in-python</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/">Python</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/Basic/">Basic</category>
      
      
      <category domain="https://keunbit.blog/tags/Python/">Python</category>
      
      <category domain="https://keunbit.blog/tags/Programming-Language/">Programming Language</category>
      
      
      <comments>https://keunbit.blog/2022/03/20/programming/python/python-04/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>03. 리스트(List), 튜플(Tuple), 딕셔너리(Dictionary), 셋(Set)</title>
      <link>https://keunbit.blog/2022/03/18/programming/python/python-03/</link>
      <guid>https://keunbit.blog/2022/03/18/programming/python/python-03/</guid>
      <pubDate>Fri, 18 Mar 2022 12:29:49 GMT</pubDate>
      
      <description>&lt;p&gt;안녕하세요 이전 &lt;a href=&quot;https://keunbit.blog/2022/03/18/python-02/&quot;&gt;포스팅&lt;/a&gt; 애서는 &lt;strong&gt;&lt;em&gt;Pyhton&lt;/em&gt;&lt;/strong&gt; 의 &lt;code&gt;기본 자료형&lt;/code&gt;과 &lt;code&gt;연산&lt;/code&gt;에 대해서 얘기를 나눠봤습니다. 이번 포스팅에서는 실제 데이터를 핸들링 하기 위해 필수적으로 알아야 할 &lt;strong&gt;&lt;em&gt;리스트, 튜플, 딕셔너리, 셋(집합)&lt;/em&gt;&lt;/strong&gt; 형태의 데이터들 특징과 어떻게 핸들링 하는지에 대해서 다뤄보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트, 튜플, 딕셔너리, 셋 의 특징 정리&lt;/li&gt;
&lt;li&gt;Mutable vs Immutable 정리&lt;/li&gt;
&lt;li&gt;Orderded vs Unordered 정리&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요 이전 <a href="https://keunbit.blog/2022/03/18/python-02/">포스팅</a> 애서는 <strong><em>Pyhton</em></strong> 의 <code>기본 자료형</code>과 <code>연산</code>에 대해서 얘기를 나눠봤습니다. 이번 포스팅에서는 실제 데이터를 핸들링 하기 위해 필수적으로 알아야 할 <strong><em>리스트, 튜플, 딕셔너리, 셋(집합)</em></strong> 형태의 데이터들 특징과 어떻게 핸들링 하는지에 대해서 다뤄보겠습니다.</p><ul><li>리스트, 튜플, 딕셔너리, 셋 의 특징 정리</li><li>Mutable vs Immutable 정리</li><li>Orderded vs Unordered 정리</li></ul><span id="more"></span><h3 id="리스트-튜플-딕셔너리-셋-집합-만들기"><a href="#리스트-튜플-딕셔너리-셋-집합-만들기" class="headerlink" title="리스트, 튜플, 딕셔너리, 셋(집합) 만들기"></a><strong>리스트, 튜플, 딕셔너리, 셋(집합) 만들기</strong></h3><p>일단 여러가지 케이스로 만들어 보고, 특징을 파악해 보겠습니다.</p><figure class="highlight python"><figcaption><span>리스트(List) 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">empty_list = []</span><br><span class="line">empty_list = <span class="built_in">list</span>()</span><br><span class="line">int_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">name_list = [<span class="string">&#x27;name_a&#x27;</span>, <span class="string">&#x27;name_b&#x27;</span>, <span class="string">&#x27;name_c&#x27;</span>, <span class="string">&#x27;name_d&#x27;</span>]</span><br><span class="line">int_name_list = [<span class="number">1</span>, <span class="string">&#x27;name_a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;name_b&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;name_c&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;name_d&#x27;</span>]</span><br><span class="line">list_in_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&#x27;name_a&#x27;</span>, <span class="string">&#x27;name_b&#x27;</span>, <span class="string">&#x27;name_c&#x27;</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>튜플(Tuple) 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">empty_tup = ()</span><br><span class="line">empty_tup = <span class="built_in">tuple</span>()</span><br><span class="line">one_tup = (<span class="number">1</span>,) <span class="comment"># 콤마 붙여줘야 함</span></span><br><span class="line">name_tup = (<span class="string">&#x27;name_a&#x27;</span>, <span class="string">&#x27;name_b&#x27;</span>, <span class="string">&#x27;name_c&#x27;</span>, <span class="string">&#x27;name_d&#x27;</span>)</span><br><span class="line">name_tup2 = <span class="string">&#x27;name_a&#x27;</span>, <span class="string">&#x27;name_b&#x27;</span>, <span class="string">&#x27;name_c&#x27;</span>, <span class="string">&#x27;name_d&#x27;</span></span><br><span class="line">int_name_tup = (<span class="number">1</span>, <span class="string">&#x27;name_a&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;name_b&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;name_c&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;name_d&#x27;</span>)</span><br><span class="line">tup_in_tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, (<span class="string">&#x27;name_a&#x27;</span>, <span class="string">&#x27;name_b&#x27;</span>, <span class="string">&#x27;name_c&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>딕셔너리(Dictionary) 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">empty_dict = &#123;&#125;</span><br><span class="line">empty_dict = <span class="built_in">dict</span>()</span><br><span class="line">example_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;keunbit&#x27;</span>, <span class="string">&#x27;blog_addr&#x27;</span>: <span class="string">&#x27;https://keunbit.blog/&#x27;</span>, <span class="string">&#x27;born_year&#x27;</span>: <span class="number">1994</span>&#125;</span><br><span class="line">key_int_dict = &#123;<span class="number">1</span>: <span class="string">&#x27;You&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;need&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;Python&#x27;</span>&#125;</span><br><span class="line">lang_dict = &#123;<span class="string">&#x27;lang_list&#x27;</span>: [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>], <span class="string">&#x27;lang_tup&#x27;</span>: (<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>)&#125;</span><br><span class="line">dict_in_dict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;keunbit&#x27;</span>, <span class="string">&#x27;born_year&#x27;</span>: <span class="number">1994</span>, <span class="string">&#x27;more&#x27;</span>: &#123;<span class="string">&#x27;blog&#x27;</span>: <span class="string">&#x27;https://keunbit.blog/&#x27;</span>, <span class="string">&#x27;github&#x27;</span>: <span class="string">&#x27;https://github.com/keunbit&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>셋(Set) 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">empty_set = <span class="built_in">set</span>()</span><br><span class="line">example_set = <span class="built_in">set</span>(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">list_to_set = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">tuple_to_set = <span class="built_in">set</span>((<span class="string">&#x27;name_a&#x27;</span>, <span class="string">&#x27;name_b&#x27;</span>, <span class="string">&#x27;name_c&#x27;</span>, <span class="string">&#x27;name_d&#x27;</span>))</span><br><span class="line">dict_to_set = <span class="built_in">set</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;keunbit&#x27;</span>, <span class="string">&#x27;blog_addr&#x27;</span>: <span class="string">&#x27;https://keunbit.blog/&#x27;</span>, <span class="string">&#x27;born_year&#x27;</span>: <span class="number">1994</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;empty_set =&gt; <span class="subst">&#123;empty_set&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;example_set =&gt; <span class="subst">&#123;example_set&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;list_to_set =&gt; <span class="subst">&#123;list_to_set&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;tuple_to_set =&gt; <span class="subst">&#123;tuple_to_set&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;dict_to_set =&gt; <span class="subst">&#123;dict_to_set&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>empty_set =&gt; set()example_set =&gt; &#123;&#39;h&#39;, &#39;n&#39;, &#39;t&#39;, &#39;y&#39;, &#39;o&#39;, &#39;P&#39;&#125;list_to_set =&gt; &#123;1, 2, 3, 4&#125;tuple_to_set =&gt; &#123;&#39;name_b&#39;, &#39;name_a&#39;, &#39;name_d&#39;, &#39;name_c&#39;&#125;dict_to_set =&gt; &#123;&#39;born_year&#39;, &#39;blog_addr&#39;, &#39;name&#39;&#125;</code></pre><p>우선 여기까지 각각의 특징을 한 번 보겠습니다.</p><ul><li>리스트<ul><li>list() 로 비어있는 리스트를 선언할 수 있다</li><li>대괄호 <code>[]</code>로 감싸 주고 각 요소들은 콤마 <code>,</code>로 구분한다.</li><li>리스트에 저장되는 요소들은 어떠한 자료형도 포함시킬 수 있다.</li></ul></li><li>튜플<ul><li>tuple() 로 비어있는 튜플을 선언할 수 있다.</li><li>소괄호 <code>()</code>로 감싸 주고 각 요소들은 콤마 <code>,</code>로 구분한다.</li><li>단 1개의 요소만 가질 때는 요소뒤에 콤마 <code>,</code>를 반드시 붙여야 한다.</li><li>변수에 선언할 때 괄호가 없어도 튜플 형태로 선언할 수 있다.</li></ul></li><li>딕셔너리<ul><li>dict() 로 비어있는 딕셔너리를 선언할 수 있다.</li><li>{Key1: Value1, Key2: Value2, Key3, Value3, …} 처럼 Key와 Value의 쌍 여러개가 <code>&#123;&#125;</code>로 둘러싸여 있다.</li><li>Key에는 변하지 않는 값이며 중복될 수 없다. 반면에 Value는 변하지 않는 값을 사용할 수 있다.</li><li>Value에는 Tuple과 List 자료형 그리고 Dictionary를 넣을 수 있다.</li></ul></li><li>셋(집합)<ul><li>set() 로 비어있는 셋을 선언할 수 있다.</li><li>중복을 허용하지 않는다.</li><li>순서가 없다. (Python -&gt; h, n, t, y, o , P 로 들어감)</li></ul></li></ul><p>우선 위 코드 예시로는 저정도 특징을 알 수 있을 것 같은데요. 좀 더 중요한 얘기를 해보겠습니다.</p><p>리스트, 튜플, 딕셔너리, 셋 에 대해서 <strong><em>중요한 몇가지 관점</em></strong> 에서 비교해 보겠습니다.</p><h3 id="Ordered-순서-있음-vs-Unordered-순서-없음"><a href="#Ordered-순서-있음-vs-Unordered-순서-없음" class="headerlink" title="Ordered(순서 있음) vs Unordered(순서 없음)"></a><strong>Ordered(순서 있음) vs Unordered(순서 없음)</strong></h3><p>순서의 유무가 무슨 의미이지 싶으실텐데요. <strong><em>데이터를 조회(찾기)</em></strong> 할 때 차이가 있습니다.</p><ul><li>순서가 있으면 <strong>인덱싱</strong>, <strong>슬라이싱</strong> 으로 데이터를 조회할 수 있다. 단, Dictionary의 경우 <strong>Hash Table</strong> 이기 때문에 key값을 통해 데이터를 가져온다. (List, Tuple, Dictionary)</li><li>순서가 없으면 <strong>인덱싱</strong>, <strong>슬라이싱</strong> 은 불가능하기 때문에, list, tuple로 변환 후 조회할 수 있다. (Set)</li></ul><h4 id="Ordered-인덱싱과-슬라이싱-List-Tuple"><a href="#Ordered-인덱싱과-슬라이싱-List-Tuple" class="headerlink" title="Ordered - 인덱싱과 슬라이싱(List, Tuple)"></a><strong>Ordered - 인덱싱과 슬라이싱(List, Tuple)</strong></h4><p><strong>인덱싱</strong>과 <strong>슬라이싱</strong>에 대해서 잠깐 짚고 넘어가겠습니다.</p><figure class="highlight python"><figcaption><span>리스트, 튜플 인덱싱과 슬라이스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">tuple_sample = (<span class="number">6</span>, <span class="number">7</span>, (<span class="number">8</span>, <span class="number">9</span>), <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;list_sample의 0의 인덱스 값은 list_sample[0] <span class="subst">&#123;list_sample[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;list_sample의 마지막 인덱스 값은 list_sample[-1] <span class="subst">&#123;list_sample[-<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;tuple_sample의 1의 인덱스 값은 tuple_sample[1] <span class="subst">&#123;tuple_sample[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;list_sample의 0~3 인덱스 값은 list_sample[0:3] <span class="subst">&#123;list_sample[<span class="number">0</span>:<span class="number">3</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;tuple_sample의 뒤에서 2번째부터 끝까지 인덱스 값은 tuple_sample[-2:] <span class="subst">&#123;tuple_sample[-<span class="number">2</span>:]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>list_sample의 0의 인덱스 값은 list_sample[0] 1list_sample의 마지막 인덱스 값은 list_sample[-1] 5tuple_sample의 1의 인덱스 값은 tuple_sample[1] 7list_sample의 0~3 인덱스 값은 list_sample[0:3] [1, [2, 3], 4]tuple_sample의 뒤에서 2번째부터 끝까지 인덱스 값은 tuple_sample[-2:] ((8, 9), 10)</code></pre><p>여기서 정리할 수 있는 것은</p><ol><li>Python은 0부터 숫자를 세기 때문에 <strong>첫번째 0요소를 조회할 땐 인덱스 값을 0으로 해야 한다</strong>는 것입니다.</li><li>슬라이싱은 <code>:</code> 기호를 사용해서 특정 <strong>인덱스:인덱스</strong> 를 통해 <strong>특정 범위의 데이터를 조회</strong>할 수 있습니다.</li></ol><h4 id="Ordered-Key값으로-조회-Dictionary"><a href="#Ordered-Key값으로-조회-Dictionary" class="headerlink" title="Ordered - Key값으로 조회(Dictionary)"></a><strong>Ordered - Key값으로 조회(Dictionary)</strong></h4><p>자 그럼 순서가 없는 딕셔너리와, 셋은 어떻게 조회할까요?</p><figure class="highlight python"><figcaption><span>딕셔너리 데이터 조회하기</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_sample = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict_sample[<span class="string">&#x27;key1&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(dict_sample[<span class="number">0</span>])  <span class="comment"># 에러</span></span><br></pre></td></tr></table></figure><pre><code>value1----&gt; 4 print(dict_sample[0])KeyError: 0</code></pre><p>딕셔너리의 경우는 key 값을 통해서 value1의 값을 조회하였습니다. 반면에 인덱스 형태로 0의 값을 주어 찾으려고 하게 되면 <code>keyError</code>라는 에러 메시지를 띄우게 됩니다. 위에서 Hash 를 통해 데이터를 조회한다고 했는데요. 이렇게 자료구조를 해쉬 방식으로 저장하게 되면, 나중에 <strong>데이터를 조회할 때 속도 측면에서 굉장한 장점</strong>을 가지게 됩니다.</p><h4 id="Unoreded-리스트-튜플로-변환-후-조회-Set"><a href="#Unoreded-리스트-튜플로-변환-후-조회-Set" class="headerlink" title="Unoreded - 리스트,튜플로 변환 후 조회(Set)"></a><strong>Unoreded - 리스트,튜플로 변환 후 조회(Set)</strong></h4><figure class="highlight python"><figcaption><span>셋 데이터 조회하기</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set_sample = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(set_sample)[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(set_sample)[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(set_sample[<span class="number">1</span>]) <span class="comment"># 에러</span></span><br></pre></td></tr></table></figure><pre><code>23----&gt; 4 print(set_sample[1])TypeError: &#39;set&#39; object is not subscriptable</code></pre><p>셋(Set)의 경우 List, Tuple 형태로 변환 후 인덱스 값을 주어 찾아야 합니다.</p><h3 id="Mutable-가변성-vs-Immutable-불변성-의-관점"><a href="#Mutable-가변성-vs-Immutable-불변성-의-관점" class="headerlink" title="Mutable(가변성) vs Immutable(불변성)의 관점"></a><strong>Mutable(가변성) vs Immutable(불변성)의 관점</strong></h3><p>가변성이란 말그대로 요소의 값이 변경할 수 있다. 즉, 수정(어데이트)이 가능하다 라는 의미입니다. (<em>그런데 요소를 추가하는 것은 또 다른 얘기입니다</em>)</p><ul><li>튜플은 Immutable &#x2F; 리스트, 딕셔너리, 셋 은 Mutable 합니다.</li></ul><p>먼저 Mutable한 것부터 보겠습니다. Mutable 하기때문에 추가, 수정, 삭제 등의 기능을 제공합니다.</p><h4 id="Mutable-추가"><a href="#Mutable-추가" class="headerlink" title="Mutable - 추가"></a><strong>Mutable - 추가</strong></h4><figure class="highlight python"><figcaption><span>리스트</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list_sample.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(list_sample)</span><br><span class="line">list_sample.extend([<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]) <span class="comment"># Nest 하게 추가하는 방법</span></span><br><span class="line"><span class="built_in">print</span>(list_sample)</span><br><span class="line">list_sample.append([<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]) <span class="comment"># list 그대로 추가됨</span></span><br><span class="line"><span class="built_in">print</span>(list_sample)</span><br><span class="line">list_sample += [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>] <span class="comment"># list 그대로 추가됨</span></span><br><span class="line"><span class="built_in">print</span>(list_sample)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, 4, 5, 6][1, 2, 3, 4, 5, 6, 7, 8, 9][1, 2, 3, 4, 5, 6, 7, 8, 9, [10, 11, 12]][1, 2, 3, 4, 5, 6, 7, 8, 9, [10, 11, 12], 13, 14, 15]</code></pre><p><code>extend()</code> 함수와 <code>append()</code> 예시 주목해보면 좋을 것 같습니다.</p><figure class="highlight python"><figcaption><span>셋</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set_sample = &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">set_sample.add(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(set_sample)</span><br><span class="line">set_sample.update([<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]) <span class="comment"># 여러개 추가할 때 update를 사용</span></span><br><span class="line"><span class="built_in">print</span>(set_sample)</span><br></pre></td></tr></table></figure><pre><code>&#123;6, 7, 8, 9, 10, 11&#125;&#123;6, 7, 8, 9, 10, 11, 12, 13, 14&#125;</code></pre><figure class="highlight python"><figcaption><span>딕셔너리</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict_sample = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line">dict_sample[<span class="string">&#x27;key4&#x27;</span>] = <span class="string">&#x27;value4&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dict_sample)</span><br><span class="line">dict_sample.update(&#123;<span class="string">&#x27;key5&#x27;</span>: <span class="string">&#x27;value5&#x27;</span>, <span class="string">&#x27;key6&#x27;</span>: <span class="string">&#x27;value6&#x27;</span>&#125;) <span class="comment"># 여러개 추가</span></span><br><span class="line"><span class="built_in">print</span>(dict_sample)</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;, &#39;key3&#39;: &#39;value3&#39;, &#39;key4&#39;: &#39;value4&#39;&#125;&#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;, &#39;key3&#39;: &#39;value3&#39;, &#39;key4&#39;: &#39;value4&#39;, &#39;key5&#39;: &#39;value5&#39;, &#39;key6&#39;: &#39;value6&#39;&#125;</code></pre><p>여러개를 추가할 때 <code>update()</code> 함수를 사용하며 셋의 경우 <strong>추가할 요소들을 []로 감싸는 것</strong> 과 딕셔너리의 경우 같은 <strong>{} 안에 key: value 형태를 맞춰서</strong> 넣어 주고 있다는 것을 주목해볼 필요가 있겠네요.</p><h4 id="Mutable-수정"><a href="#Mutable-수정" class="headerlink" title="Mutable - 수정"></a><strong>Mutable - 수정</strong></h4><figure class="highlight python"><figcaption><span>리스트</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list_sample[<span class="number">1</span>] = <span class="number">6</span></span><br><span class="line"><span class="built_in">print</span>(list_sample)</span><br></pre></td></tr></table></figure><pre><code>[1, 6, 3, 4, 5]</code></pre><p>셋의 경우 데이터를 수정하는 기능은 없습니다.</p><figure class="highlight python"><figcaption><span>딕셔너리</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dict_sample = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line">dict_sample[<span class="string">&#x27;key1&#x27;</span>] = <span class="string">&#x27;value4&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dict_sample)</span><br><span class="line">dict_sample.update(&#123;<span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value5&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value6&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(dict_sample)</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;key1&#39;: &#39;value4&#39;, &#39;key2&#39;: &#39;value2&#39;, &#39;key3&#39;: &#39;value3&#39;&#125;&#123;&#39;key1&#39;: &#39;value4&#39;, &#39;key2&#39;: &#39;value5&#39;, &#39;key3&#39;: &#39;value6&#39;&#125;</code></pre><p>딕셔너리는 update() 함수를 통해 추가, 수정도 가능하네요.</p><h4 id="Mutable-삭제"><a href="#Mutable-삭제" class="headerlink" title="Mutable - 삭제"></a><strong>Mutable - 삭제</strong></h4><figure class="highlight python"><figcaption><span>리스트</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list_sample = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> list_sample[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(list_sample)</span><br><span class="line">list_sample = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list_sample.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(list_sample)</span><br><span class="line">list_sample = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list_sample.pop()</span><br><span class="line"><span class="built_in">print</span>(list_sample)</span><br><span class="line">list_sample = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list_sample.remove(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(list_sample)</span><br></pre></td></tr></table></figure><pre><code>[1, 3, 4, 5][2, 3, 4, 5][1, 2, 3, 4][1, 2, 4, 5]</code></pre><p><code>del</code>, <code>pop()</code> 함수는 <strong>index</strong> 를 통해서 삭제한다는 것과 <code>remove()</code> 함수는 <strong>요소 값</strong>을 삭제하는 것 그리고 <code>pop()</code> 인덱스 값을 넣지 않을 경우 <strong>가장 끝에 요소를 지운다</strong>는 것을 짚고 넘어가면 좋을 것 같습니다.</p><figure class="highlight python"><figcaption><span>셋</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set_sample = &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">set_sample.remove(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(set_sample)</span><br><span class="line">set_sample.clear()</span><br><span class="line"><span class="built_in">print</span>(set_sample)</span><br></pre></td></tr></table></figure><pre><code>&#123;6, 8, 9, 10&#125;set()</code></pre><p>셋도 마찬가지로 <code>remove()</code> 함수를 통해서 요소 값 자체를 삭제시키네요. <code>clear()</code> 함수는 요소를 모두 삭제시킬 수 있습니다.</p><figure class="highlight python"><figcaption><span>딕셔너리</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict_sample = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dict_sample[<span class="string">&#x27;key1&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(dict_sample)</span><br><span class="line">dict_sample.pop(<span class="string">&#x27;key2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dict_sample)</span><br><span class="line">dict_sample.clear()</span><br><span class="line"><span class="built_in">print</span>(dict_sample)</span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;key2&#39;: &#39;value2&#39;, &#39;key3&#39;: &#39;value3&#39;&#125;&#123;&#39;key3&#39;: &#39;value3&#39;&#125;&#123;&#125;</code></pre><p>딕셔너리는 <code>del</code>, <code>pop()</code>, <code>clear()</code> 함수를 통해서 요소를 삭제시킬 수 있습니다.</p><h4 id="Immutable-추가"><a href="#Immutable-추가" class="headerlink" title="Immutable - 추가"></a><strong>Immutable - 추가</strong></h4><p>튜플의 경우 요소의 값을 변화시키는 것을 못할 뿐 뒤에 값을 더하는 것은 가능합니다. (리스트와 동일)</p><figure class="highlight python"><figcaption><span>튜플</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set_sample1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">set_sample2 = (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">set_sample3 = set_sample1 + set_sample2</span><br><span class="line"><span class="built_in">print</span>(set_sample3)</span><br></pre></td></tr></table></figure><pre><code>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</code></pre><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a><strong>결론</strong></h3><p>정리해보겠습니다. 데이터를 핸들링하기 위해서 필수적으로 알아야 하는 데이터 자료형들의 특징에 대해서 알아봤습니다. 그리고 <strong><em>리스트, 튜플, 딕셔너리, 셋</em></strong> 에 대해서 <strong>순서</strong> 와 <strong>가변성</strong> 의 관점에서 각각의 <strong>기능(추가, 수정, 삭제)</strong> 들도 다뤄봤습니다. 이 내용은 여기서 끝이 아니라 앞으로 개발 하시면서 계속해서 다룰것들이니 내용 잘 정리해두시면 좋을 것 같습니다.</p><p>다음 포스팅은 <strong>조건문(if)</strong>, <strong>반복문(for, while)</strong> 주제에 대해서 다뤄보겠습니다.</p><p><em>이상으로 이번 포스팅은 마치겠습니다. 추가 의견이나 수정이 필요한 부분이 있다면 언제든지 거침없는 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://wikidocs.net/14">점프 투 파이썬</a> <a href="https://wikidocs.net/14">https://wikidocs.net/14</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/">Python</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/Basic/">Basic</category>
      
      
      <category domain="https://keunbit.blog/tags/Python/">Python</category>
      
      <category domain="https://keunbit.blog/tags/Programming-Language/">Programming Language</category>
      
      
      <comments>https://keunbit.blog/2022/03/18/programming/python/python-03/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>02. 자료형과 연산</title>
      <link>https://keunbit.blog/2022/03/18/programming/python/python-02/</link>
      <guid>https://keunbit.blog/2022/03/18/programming/python/python-02/</guid>
      <pubDate>Fri, 18 Mar 2022 08:49:53 GMT</pubDate>
      
      <description>&lt;p&gt;안녕하세요 이전 &lt;a href=&quot;https://keunbit.blog/2022/03/17/python-01/&quot;&gt;포스팅&lt;/a&gt; 애서는 우리가 변수를 선언하면 &lt;strong&gt;&lt;em&gt;‘Everythin is object in Python’&lt;/em&gt;&lt;/strong&gt; 에 따라 &lt;strong&gt;객체를 생성하고 변수는 그것을 가르킨다&lt;/strong&gt; 라고 정리했었습니다. 그런데 객체(Object)라는 것도 &lt;strong&gt;&lt;em&gt;type&lt;/em&gt;&lt;/strong&gt; 이 존재합니다. 이번 포스팅에서는 어떤 type이 있는지, 그리고 간단한 연산에 대해서 얘기해보겠습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요 이전 <a href="https://keunbit.blog/2022/03/17/python-01/">포스팅</a> 애서는 우리가 변수를 선언하면 <strong><em>‘Everythin is object in Python’</em></strong> 에 따라 <strong>객체를 생성하고 변수는 그것을 가르킨다</strong> 라고 정리했었습니다. 그런데 객체(Object)라는 것도 <strong><em>type</em></strong> 이 존재합니다. 이번 포스팅에서는 어떤 type이 있는지, 그리고 간단한 연산에 대해서 얘기해보겠습니다.</p><span id="more"></span><ul><li>기본 자료형 (Data Type) : Integer, Float, String, Boolean</li><li>기본 연산자 : +,-,*,&#x2F;,...</li></ul><h3 id="숫자형-정수형-Integer-실수형-Float"><a href="#숫자형-정수형-Integer-실수형-Float" class="headerlink" title="숫자형 - 정수형(Integer), 실수형(Float)"></a><strong>숫자형 - 정수형(Integer), 실수형(Float)</strong></h3><blockquote><p>수학에서 정수는 양의 정수, 음의 정수 및 0으로 이루어진 수의 체계이다. 수학에서 실수는 주로 실직선 위의 점 또는 십진법 전개로 표현되는 수 체계이다. <em>- 위키독스 -</em></p></blockquote><p>네, 위키독스에서 나온 정의를 인용하며 더 설명하진 않겠습니다.</p><figure class="highlight python"><figcaption><span>정수형</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a = -<span class="number">12</span></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;int&#39;&gt;</code></pre><figure class="highlight python"><figcaption><span>실수형</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.0</span></span><br><span class="line">a = -<span class="number">1.2</span></span><br><span class="line">a = <span class="number">1.23E10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;float&#39;&gt;</code></pre><p>대신 여기서 앞에 class가 붙은 것에 대해서 잠깐 짚고 넘어가겠습니다. 이전 포스팅에서도 그렇고 이번 글의 시작에 파이썬에서는 <strong><em>‘객체를 생성하고 변수는 그것을 가르킨다’</em></strong> 라고 했습니다. 즉, <code>tpye(a)</code>를 <code>print()</code> 해서 나온 결과가 <em>‘int Object’가 생성 되었음</em> 또는 <em>‘float Object’가 생성 되었음</em> 그리고 a 라는 변수가 해당 Object를 가르키고 있는 것입니다. 그럼 저기 보이는 <code>class</code>가 무엇인지에 대해서는 이후 포스팅에서 <strong><em>class와 모듈</em></strong> 주제로 더 자세히 다뤄보겠습니다. 우선은 <strong><em>객체</em></strong> 라고 해두죠.</p><h3 id="문자형-String"><a href="#문자형-String" class="headerlink" title="문자형(String)"></a><strong>문자형(String)</strong></h3><blockquote><p>문자, 단어 등으로 구성된 문자들의 집합을 의미한다. <em>-위키독스-</em></p></blockquote><p>우선 문자열을 만드는 방법에는 3가지가 있습니다. <strong><em>“,’,”””</em></strong> 이 표현들로 감싸주는 것입니다.</p><figure class="highlight python"><figcaption><span>실수형</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;변수 a는 <span class="subst">&#123;a&#125;</span> 이고 타입은 <span class="subst">&#123;<span class="built_in">type</span>(a)&#125;</span> 입니다.&quot;</span>)</span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;변수 a는 <span class="subst">&#123;a&#125;</span> 이고 타입은 <span class="subst">&#123;<span class="built_in">type</span>(a)&#125;</span> 입니다.&quot;</span>)</span><br><span class="line">a = <span class="string">&quot;&quot;&quot;Everything is Object in Python&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;변수 a는 <span class="subst">&#123;a&#125;</span> 이고 타입은 <span class="subst">&#123;<span class="built_in">type</span>(a)&#125;</span> 입니다.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>변수 a는 1.0 이고 타입은 &lt;class &#39;str&#39;&gt; 입니다.변수 a는 1 이고 타입은 &lt;class &#39;str&#39;&gt; 입니다.변수 a는 Everything is Object in Python 이고 타입은 &lt;class &#39;str&#39;&gt; 입니다.</code></pre><p>위 예시를 봤을 때 <code>1.0</code> 하고 <code>1</code> 은 정수나 실수형 아닌가? 하는 의문이 드실텐데요. 일부로 이런 예시를 넣어봤습니다. 즉, 문자열로 정의하는 것은 <strong><em>“,’,”””</em></strong> 이 표현들로 감싸져있느냐가 핵심입니다.</p><p>문자열에 대해서는 여기서 끝내기 아쉬우니, <strong><em>”””</em></strong> 는 언제사용하는지에 대해서 짧게 설명하고 넘어가겠습니다.</p><ol><li>함수에 대한 설명을 작성할 때</li><li>큰 따옴표(“”)와 작은 따옴표(‘’)가 존재하는 텍스트를 다룰 때</li></ol><p>1번은 나중에 함수를 주제로 포스팅할 때 자연스럽게 설명드리게 될 것 같고, 2번에 대해서 간단하게 예시를 보여드리겠습니다.</p><figure class="highlight python"><figcaption><span>문자형</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;이 글에는 &quot;큰 따옴표&quot;와 &#x27;</span>작은 따옴표<span class="string">&#x27;가 존재합니다&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>SyntaxError: invalid syntax</code></pre><figure class="highlight python"><figcaption><span>문자형</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;이 글에는 &quot;</span>큰 따옴표<span class="string">&quot;와 &#x27;작은 따옴표&#x27;가 존재합니다&quot;</span></span><br></pre></td></tr></table></figure><pre><code>SyntaxError: invalid syntax</code></pre><figure class="highlight python"><figcaption><span>문자형</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;&quot;&quot;이 글에는 &quot;큰 따옴표&quot;와 &#x27;작은 따옴표&#x27;가 존재합니다&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="string">&#x27;&#x27;&#x27;이 글에는 &quot;큰 따옴표&quot;와 &#x27;작은 따옴표&#x27;가 존재합니다&#x27;&#x27;&#x27;</span> <span class="comment"># &#x27;&#x27;&#x27; 으로도 사용 가능합니다 ^^</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>이 글에는 &quot;큰 따옴표&quot;와 &#39;작은 따옴표&#39;가 존재합니다</code></pre><h3 id="논리형-Boolean"><a href="#논리형-Boolean" class="headerlink" title="논리형(Boolean)"></a><strong>논리형(Boolean)</strong></h3><blockquote><p>참(True)과 거짓(False)을 나타내는 자료형이다. 2가지 값만 가질 수 있다. <code>True</code>, <code>False</code>는 파이썬의 예약어로 ture, false가 아닌 첫 문자를 항상 대문자로 정의하여야 한다 <em>-위키독스-</em></p></blockquote><figure class="highlight python"><figcaption><span>논리형</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;bool&#39;&gt;&lt;class &#39;bool&#39;&gt;</code></pre><p>논리 자료형에서는 어떤 케이스에서 ‘True’, ‘False’ 라고 판단하는지를 위주로 알아보겠습니다.</p><figure class="highlight python"><figcaption><span>논리형 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = 1, b = 1의 bool은 <span class="subst">&#123;a == b&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;1 &gt; 2의 bool은 <span class="subst">&#123;<span class="number">1</span> &gt; <span class="number">2</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;1 &lt; 2의 bool은 <span class="subst">&#123;<span class="number">1</span> &lt; <span class="number">2</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">a = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = &#x27;&#x27;일 때 bool은 <span class="subst">&#123;<span class="built_in">bool</span>(a)&#125;</span>&quot;</span>)</span><br><span class="line">a = <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = None일 때 bool은 <span class="subst">&#123;<span class="built_in">bool</span>(a)&#125;</span>&quot;</span>)</span><br><span class="line">a = []</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = []일 때 bool은 <span class="subst">&#123;<span class="built_in">bool</span>(a)&#125;</span>&quot;</span>)</span><br><span class="line">a = [<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = [1]일 때 bool은 <span class="subst">&#123;<span class="built_in">bool</span>(a)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>a = 1, b = 1의 bool은 True1 &gt; 2의 bool은 False1 &lt; 2의 bool은 True--------------------a = &#39;&#39;일 때 bool은 Falsea = None일 때 bool은 Falsea = []일 때 bool은 Falsea = [1]일 때 bool은 True</code></pre><p>자 위 코드 결과에 대해서 짧게 설명을 드려보자면수학기호 <strong>&#x3D;, &gt;, &lt;</strong> 은 설명안해도 잘 아실 것 같으니 넘어가겠습니다. 변수에 대해서 “참,거짓”을 판단할 때 요소(attributes)가 없다면 <code>False</code> 결과를 내고있음을 알 수 있습니다. 다음 포스팅에서 다루겠지만, <code>[]</code> 를 ‘리스트 자료형’이라고 하는데요. <code>a = [1]</code> 처럼 1이라는 정수형 요소가 하나 존재할 때는 <code>True</code>를 뱉지만, <code>a = []</code>처럼 비어있을 경우 <code>False</code>를 내뱉는 것을 알 수 있습니다.</p><h3 id="연산자-다루기"><a href="#연산자-다루기" class="headerlink" title="연산자 다루기"></a><strong>연산자 다루기</strong></h3><p>이제 연산자에 대해서 얘기해보죠. 비교적 간단합니다.</p><figure class="highlight python"><figcaption><span>숫자형 연산자 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;더하기 연산 a + b = <span class="subst">&#123;a+b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;빼기 연산 a - b = <span class="subst">&#123;a-b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;곱하기 연산 a * b = <span class="subst">&#123;a*b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;나누기 연산 a / b = <span class="subst">&#123;a/b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;제곱 연산 a ** b = <span class="subst">&#123;a**b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;나머지 연산 a % b = <span class="subst">&#123;a%b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;몫 연산 a // b = <span class="subst">&#123;a//b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>더하기 연산 a + b = 3빼기 연산 a - b = -1곱하기 연산 a * b = 2나누기 연산 a / b = 0.5--------------------제곱 연산 a ** b = 25나머지 연산 a % b = 1몫 연산 a // b = 2</code></pre><p>네 기본 연산에 대한 예시를 들어보았습니다. 그리고 데이터를 다루다보면 한 번 선언한 변수를 반복적으로 1씩 더해주거나 빼주거나 하는 경우가 존재합니다.</p><figure class="highlight python"><figcaption><span>숫자형 연산자 예시2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">a = a + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = a+1 결과는 <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span> <span class="comment"># 예시를 위해 다시 선언</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a += 1 결과는 <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">a -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a -= 1 결과는 <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">a /= <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a /= 2 결과는 <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">a **= <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a **= 2 결과는 <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">a //= <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a //= 2 결과는 <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">5</span></span><br><span class="line">a %= <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a %= 2 결과는 <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>a = a+1 결과는 6a += 1 결과는 6a -= 1 결과는 4a /= 2 결과는 2.5a **= 2 결과는 25a //= 2 결과는 2a %= 2 결과는 1</code></pre><p>위와 같이 작성하는 것은 ‘아 이렇게도 작성해서 연산할 수 있구나’ 정도로만 알아두면 좋을 것 같네요.</p><p>문자형에도 연산자를 사용할 수 있는데요. 예시를 들어보죠.</p><figure class="highlight python"><figcaption><span>문자형 연산자 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;You&quot;</span></span><br><span class="line">b = <span class="string">&quot;need&quot;</span></span><br><span class="line">c = <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;문자열 더하기 <span class="subst">&#123;a + b + c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;문자열에 숫자 곱하기 <span class="subst">&#123;c*<span class="number">2</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;문자열 길이 구하기 <span class="subst">&#123;<span class="built_in">len</span>(c)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>문자열 더하기 YouneedPython문자열에 숫자 곱하기 PythonPython문자열 길이 구하기 6</code></pre><p>문자열을 더하기(<em>Concatenation</em>) 와 곳셈연산자를 통해 표현하는 것과, 문자열의 길이를 구하는 내장 함수인 <code>len()</code>에 대해서 알아보았습니다.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a><strong>결론</strong></h3><p>이번 포스팅에서는 자료형(Integer, Float, String, Boolean)에 대해서 어떤 것들인지를 알아보았고, 연산자를 어떻게 활용할 수 있는지에 대해서 정리해 봤습니다.</p><p>다음 포스팅은 <strong><em>리스트(List)</em></strong>, <strong><em>튜플(Tuple)</em></strong>, <strong><em>딕셔너리(Dictionary)</em></strong>, <strong><em>셋(Set)</em></strong> 자료형에 대해서 다뤄보겠습니다.</p><p><em>이상으로 이번 포스팅은 마치겠습니다. 추가 의견이나 수정이 필요한 부분이 있다면 언제든지 거침없는 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://wikidocs.net/12">점프 투 파이썬</a> <a href="https://wikidocs.net/12">https://wikidocs.net/12</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/">Python</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/Basic/">Basic</category>
      
      
      <category domain="https://keunbit.blog/tags/Python/">Python</category>
      
      <category domain="https://keunbit.blog/tags/Programming-Language/">Programming Language</category>
      
      <category domain="https://keunbit.blog/tags/Data-Type/">Data Type</category>
      
      
      <comments>https://keunbit.blog/2022/03/18/programming/python/python-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>01. 변수와 메모리</title>
      <link>https://keunbit.blog/2022/03/17/programming/python/python-01/</link>
      <guid>https://keunbit.blog/2022/03/17/programming/python/python-01/</guid>
      <pubDate>Thu, 17 Mar 2022 10:13:36 GMT</pubDate>
      
      <description>&lt;p&gt;안녕하세요. 이전 &lt;a href=&quot;&#39;https://keunbit.blog/2022/03/15/python-00/&quot;&gt;포스팅&lt;/a&gt; 에서는 우리가 &lt;strong&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/strong&gt; 코딩을 하기 위한 개발환경을 이루는 요소들에 대해서 다루면서 &lt;strong&gt;OS&lt;/strong&gt;, &lt;strong&gt;인터프리터&lt;/strong&gt;, &lt;strong&gt;에디터&lt;/strong&gt; 에 대해서 얘기를 해봤는데요. 이번 포스팅 부터는 본격적으로 &lt;strong&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/strong&gt; 코딩에 대해서 시작하겠습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요. 이전 <a href="'https://keunbit.blog/2022/03/15/python-00/">포스팅</a> 에서는 우리가 <strong><em>Python</em></strong> 코딩을 하기 위한 개발환경을 이루는 요소들에 대해서 다루면서 <strong>OS</strong>, <strong>인터프리터</strong>, <strong>에디터</strong> 에 대해서 얘기를 해봤는데요. 이번 포스팅 부터는 본격적으로 <strong><em>Python</em></strong> 코딩에 대해서 시작하겠습니다.</p><span id="more"></span><p>혹시 본인 노트북에 개발환경세팅을 하는것에 어려움이 있었다면, <em>Google</em> 에서 제공하는 <strong><em>Colab</em></strong> 을 이용해서 코딩을 해보시는 것을 추천합니다.</p><p><strong><em>Google Colab</em></strong> 은 클라우드 기반의 무료 <code>Jupyter Notebook</code> 에디터 형태로 <code>Python 스크립트</code>를 작성하고 실행할 수 있는 개발환경 입니다. Colab에 대해서 <a href="https://theorydb.github.io/dev/2019/08/23/dev-ml-colab/">잘 정리된 글</a>과 <a href="https://colab.research.google.com/?hl=ko">Colab URL</a>은 Reference에 적어두겠습니다.</p><h3 id="변수와-메모리"><a href="#변수와-메모리" class="headerlink" title="변수와 메모리"></a><strong>변수와 메모리</strong></h3><p>우선 <strong><em>변수와 메모리</em></strong> 에 대해서 개념을 짚고 넘어가겠습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;keunbit&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><pre><code>keunbit</code></pre><p>자, 위 코드를 봤을 때 감각적으로 이해가 되시지 않나요? <strong><em>Python</em></strong> 이라는 언어가 굉장히 <em>배우기 쉽고 개발자 친화적</em> 이라고 설명드린 이유입니다. 저 한 줄을 읽었을 때 이정도 의미로 생각할 수 있겠네요.</p><ol><li>name은 keunbit이다</li><li>name과 keunbit은 같다</li><li>name을 keunbit으로 정의한다.</li></ol><p>좀 더 개발자(?)스럽게 생각을 해보죠, <strong>“name이라는 변수에 “keunbit”이라는 값을 할당한다”</strong> 라고 얘기하는게 맞습니다. (<em>정확하게 설명하자면, 문자열 타입의 Object를 만들어서 name이라는 변수가 그 Object를 가리키는 것 입니다.</em>) <em><code>- Everything is object in Python -</code></em> 중요한 것은 <strong><em>가리킨다</em></strong> 라는 의미인데요. 좀 더 예시를 들어보겠습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;keunbit&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;keubit 이라는 str Object를 만들고&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;변수 &#x27;name&#x27;이 가르키는 주소는 <span class="subst">&#123;<span class="built_in">id</span>(name)&#125;</span> 입니다.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>keubit 이라는 str Object를 만들고변수 &#39;name&#39;이 가르키는 주소는 140342633259056 입니다.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name1 = name2 = <span class="string">&#x27;daehwan&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;daewhan 이라는 str Object를 만들고&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;변수 name1이 이 Object를 가르킵니다. 주소는 <span class="subst">&#123;<span class="built_in">id</span>(name1)&#125;</span> 입니다.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;변수 name2이 이 Object를 가르킵니다. 주소는 <span class="subst">&#123;<span class="built_in">id</span>(name2)&#125;</span> 입니다.&quot;</span>)</span><br></pre></td></tr></table></figure><pre><code>daewhan 이라는 str Object를 만들고변수 name1이 이 Object를 가르킵니다. 주소는 140342098563568 입니다.변수 name2이 이 Object를 가르킵니다. 주소는 140342098563568 입니다.</code></pre><p>위 코드를 그림으로 표현하면 다음과 같이 표현할 수 있습니다. <img src="/2022/03/17/programming/python/python-01/memory.svg" class="center_img"></p><p>네 그림을 보시면 조금은 이해가 되실 것 같은데요. 그러면 변수를 선언하고 정의하는 과정은 이해가 되셨을테니, 변수 네이밍에 대한 얘기를 하겠습니다. 저는 지금 예시를 들면서 변수를 <code>name</code>, <code>name1</code>, <code>name2</code> 라고 네이밍을 했는데요. 몇가지 rule이 있습니다.</p><figure class="highlight bash"><figcaption><span>피해야 피해야 하는 rule</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 특별한 의미가 있는 `예약어`는 쓰지 않는다</span><br><span class="line"> - ex) <span class="keyword">for</span>, <span class="keyword">if</span>, <span class="keyword">else</span> 등...</span><br><span class="line">2. %,!,@ 등 특수문자를 사용하지 않는다</span><br><span class="line"> - ex) !name, @name, name<span class="comment"># 등...</span></span><br><span class="line">3. 숫자를 맨 앞에 쓰지 않는다.</span><br><span class="line"> - ex) 1name, 2name, 등...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>고려하면 좋은 rule</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 의미 있는 단어로 표기하는 것이 좋다 (다른 사람이 봤을 때 무엇을 뜻하는지를 바로 알 수 있도록!)</span><br><span class="line"> - ex) close_price, open_price</span><br><span class="line">2. 언더바(_)를 활용해서 작성해도 좋다</span><br><span class="line"> - ex) my_name</span><br></pre></td></tr></table></figure><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a><strong>결론</strong></h3><p>변수명을 짓는 것은 간단해 보이지만 사실은 굉장히 중요한 일 중 하나 입니다. 나중에 다루겠지만, 함수명을 작성하는 것 또한 매우 중요한데요. 네이밍을 잘 지을수록 협업하는 사람과의 코드 공유가 잘되고 커뮤니케이션이 잘 될 수 있기 때문입니다. 앞으로 개발 연습을 하시면서, 변수 네이밍도 신경을 쓰면서 작성하시는 것을 추천합니다.</p><p><strong><em>데이터 타입</em></strong> 도 이번 글에 포함하려 했지만, 굉장히 중요한 내용이기에 다음 포스팅에서 좀 더 자세히 다루면 좋을 것 같습니다. 다음 포스팅을 보시면 위에서 언급했던 <code>str</code> 그리고 <code>Object</code>가 무엇인지 이해가 되실 것 같습니다.</p><p><em>이상으로 이번 포스팅은 마치겠습니다. 추가 의견이나 수정이 필요한 부분이 있다면 언제든지 거침없는 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://colab.research.google.com/?hl=ko">Google Colab 줏호</a> <a href="https://colab.research.google.com/?hl=ko">https://colab.research.google.com/?hl=ko</a></li><li><a href="https://theorydb.github.io/dev/2019/08/23/dev-ml-colab/">Colab 개념 정리</a> <a href="https://theorydb.github.io/dev/2019/08/23/dev-ml-colab/">https://theorydb.github.io/dev/2019/08/23/dev-ml-colab/</a></li><li><a href="https://google.github.io/styleguide/pyguide.html#316-naming">구글 파이썬 스타일 가이드</a> <a href="https://google.github.io/styleguide/pyguide.html#316-naming">https://google.github.io/styleguide/pyguide.html#316-naming</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/">Python</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/Basic/">Basic</category>
      
      
      <category domain="https://keunbit.blog/tags/Python/">Python</category>
      
      <category domain="https://keunbit.blog/tags/Programming-Language/">Programming Language</category>
      
      
      <comments>https://keunbit.blog/2022/03/17/programming/python/python-01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>00. 파이썬 개발환경</title>
      <link>https://keunbit.blog/2022/03/15/programming/python/python-00/</link>
      <guid>https://keunbit.blog/2022/03/15/programming/python/python-00/</guid>
      <pubDate>Tue, 15 Mar 2022 14:49:29 GMT</pubDate>
      
      <description>&lt;p&gt;안녕하세요. 이전 &lt;a href=&quot;https://keunbit.blog/2022/03/14/python-intro/&quot;&gt;포스팅&lt;/a&gt; 은 우리가 &lt;strong&gt;왜(Why) 파이썬을 하는지&lt;/strong&gt;를 주제로 얘기를 해봤는데요. 이번 포스팅은 &lt;strong&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/strong&gt; 을 본격적으로 시작하기 전에 어떤것들을 다룰 것인지 먼저 말씀드리고자 합니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요. 이전 <a href="https://keunbit.blog/2022/03/14/python-intro/">포스팅</a> 은 우리가 <strong>왜(Why) 파이썬을 하는지</strong>를 주제로 얘기를 해봤는데요. 이번 포스팅은 <strong><em>Python</em></strong> 을 본격적으로 시작하기 전에 어떤것들을 다룰 것인지 먼저 말씀드리고자 합니다.</p><span id="more"></span><p>우선 저는 앞으로 다룰 내용을 크게 <strong>세가지</strong>로 나눠서 단계별로 다루려고 합니다. (<em>여기서 나누는 기준은 단지 제가 지금까지 Pyhton을 다뤄보면서 느꼈던 순수히 저의 기준에서 나눈 것임을 말씀드립니다.</em>)</p><ul><li><strong>Step 1</strong> 메모리와 변수에 대한 개념, 그리고 자료형, 연산, 기초 문법(반복문, 조건문) 등…</li><li><strong>Step 2</strong> 함수(Function), 클래스(Class), 모듈(Module) 등…</li><li><strong>Step 3</strong> 병렬처리, 데코레이터, 패키지 빌드, Pythonic한 코딩 등…</li><li><strong>Step +</strong> 추가 꿀팁, 공유하면 좋을 기능들 등… (<em>수시로 짧게 포스팅 예정</em>)</li></ul><p>그리고 파이썬 프로그래밍을 위한 <strong>“개발환경”</strong> 세팅(설치)에 대해서는 다루지 않을 예정입니다. (<em>이미 많은 분들이 너무나도 잘 정리 해주신 자료가 많기때문에…</em>)</p><p>대신 <strong>“개발환경”</strong> 에 대해서 잠깐 짚고 넘어가겠습니다. 크게 3가지로 구성되었다고 할 수 있을 것 같은데요.</p><ol><li>운영체제 (Operating System, OS)</li><li>Python Interpreter</li><li>코드 편집기 (Editor)</li></ol><p>이 3가지에 대해서 각각이 무엇이고 어떤 것들이 있는지를 먼저 알고 넘어가면 좋을 듯 합니다.</p><h3 id="운영체제-Operating-System-OS"><a href="#운영체제-Operating-System-OS" class="headerlink" title="운영체제 (Operating System, OS)"></a><strong>운영체제 (Operating System, OS)</strong></h3><p>운영체제는 많이 들어보셨을 것 같습니다. 대표적으로 <strong><em>Winodw</em></strong>, <strong><em>Mac</em></strong>, <strong><em>Ubuntu(Linux)</em></strong> 가 있습니다. <img src="/2022/03/15/programming/python/python-00/os_image.svg" class="center_img"></p><p>아마 코딩을 처음 입문 하시는 분은 대부분 Window 혹은 Mac 이겠죠. Ubuntu(Linux)에 대해서는 <a href="https://hanamon.kr/https://hanamon.kr/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/"><em>Reference</em></a> 참고하시면 좋을듯 합니다. 여기서는 ‘지금 내 개발환경에서의 <strong>OS</strong> 는 이거구나’ 정도로 이해하고 넘어가겠습니다.</p><h3 id="Python-Interpreter"><a href="#Python-Interpreter" class="headerlink" title="Python Interpreter"></a><strong>Python Interpreter</strong></h3><p><code>Python Interpreter</code> 는 대표적으로 <strong><em>Python</em></strong>, <strong><em>Anaconda(or Miniconda)</em></strong> 이 있습니다. (<del>저는 Anaconda를 사용합니다</del>) 음...? <code>Python Interpreter</code>가 <strong><em>Python</em></strong> 이라는건 무슨 말이지? 싶을 텐데요.</p><p>여기서 <code>인터프리터</code>란,</p><blockquote><p>인터프리터(Interpreter)는 프로그래밍 언어의 소스 코드를 바로 실행하는 컴퓨터 프로그램 또는 환경을 말한다. 원시 코드를 기계어로 번역하는 컴파일러와 대비된다. -위키백과-</p></blockquote><p>결국, 우리가 앞으로 작성할 <code>소스코드</code>를 동작할 수 있게 해주는 프로그램인데, 우리가 지금 <strong><em>Python</em></strong> 을 할 것이기 떄문에 <code>Python Interpreter</code>라고 한 것입니다. 만약 <strong><em>JavaScript</em></strong> 에 대해서 다뤘다면, <code>JavaScript Interpreter</code>라고 적었겠죠. 그리고 마지막에 “컴파일러와 대비된다” 라는 설명이 있는데요.</p><p><code>인터프리터</code>와 <code>컴파일러</code>의 차이는</p><ul><li>인터프리터는 개발 편의성이 높지만, 실행 속도는 느리다. (<em>Python, JavaScript, Ruby,...</em>)</li><li>컴파일러는 개발 편의성은 떨어지지만, 실행 속도는 빠르다. (<em>Java, C, C++,...</em>) 우선 이정도까지만 정리하겠습니다. 더 자세한 설명은 <em>Reference</em> 참고하시면 좋을듯 합니다.</li></ul><p>저는 <strong><em>Anaconda</em></strong> 를 사용하고 있습니다. 그 이유는</p><ol><li>가상환경(virtual env) 구성이 쉽다. (프로젝트 별 필요 라이브러리를 적절히 구성하기 용이함)</li><li>모듈 별 디펜던시(dependency)를 알아서 관리해준다. (버전 업데이트에서 생기는 기존에 설치된 모듈과의 충돌 방지해줌)</li></ol><p>위 장점에 대해서 따로 더 설명하진 않겠습니다.(<del>아마 직접 개발하시면서 몸으로 느끼게 될 거라고 생각합니다</del>)</p><h3 id="코드-편집기-Editor"><a href="#코드-편집기-Editor" class="headerlink" title="코드 편집기 (Editor)"></a><strong>코드 편집기 (Editor)</strong></h3><p>마지막으로 <code>에디터</code> 인데요. 말그대로 우리가 Python 이라는 언어를 작성하고 수정하는 행위들을 할 수 있도록 돕는 도구 입니다. 좋은 에디터 일수록, 개발자를 잘 서포팅(?)해주고, 코딩을 수월하게 할 수 있게 도와줍니다. 대표적으로는 <strong><em>Pycharm</em></strong>, <strong><em>Visual Studio Code</em></strong>, <strong><em>Jupyter Notebook(or Lab)</em></strong>, <strong><em>Sublime Text</em></strong>, <strong><em>Atom</em></strong> 등 다양한데요. 보통 개인이 선호하는걸 사용합니다. (<del>저는 <strong><em>Visual Studio Code</em></strong> 를 주로 사용하고 있습니다 ^^</del>)</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a><strong>결론</strong></h3><p>이번 포스팅에서는 <strong><em>Python</em></strong> 을 본격적으로 시작하기에 앞서 단계별로 어떤 것을 다룰 것인지, 그리고 <code>개발환경</code>에 대해서 얘기를 해봤는데요. <strong>개발환경</strong>은 <strong><em>운영체제</em></strong>, <strong><em>인터프리터</em></strong>, **<em>에디터</em>**로 구성되고 개발자는 에디터를 통해 <code>소스코드</code>를 작성하고(<em>Python 문법에 맞게</em>) 인터프리터가 코드를 읽고 실행시켜준다로 요약해볼 수 있을 것 같습니다. <img src="/2022/03/15/programming/python/python-00/use_flow.svg" class="center_img"></p><p><em>이상으로 이번 포스팅은 마치겠습니다. 추가 의견이나 수정이 필요한 부분이 있다면 언제든지 거침없는 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h3><ul><li><a href="https://roadmap.sh/python">파이썬 개발 로드맵</a> <a href="https://roadmap.sh/python">https://roadmap.sh/python</a></li><li><a href="https://hanamon.kr/https://hanamon.kr/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/">리눅스와 우분투 정리 글</a> <a href="https://hanamon.kr/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EA%B3%A0-%EC%9A%B0%EB%B6%84%ED%88%AC%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/">https://hanamon.kr/리눅스는-무엇이고-우분투는-무엇인가/</a></li><li><a href="https://velog.io/@jaeyunn_15/OS-Compiler-vs-Interpreter">인터프리터와 컴파일러 차이</a> <a href="https://velog.io/@jaeyunn_15/OS-Compiler-vs-Interpreter">https://velog.io/@jaeyunn_15/OS-Compiler-vs-Interpreter</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/">Python</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/Basic/">Basic</category>
      
      
      <category domain="https://keunbit.blog/tags/Python/">Python</category>
      
      <category domain="https://keunbit.blog/tags/Programming-Language/">Programming Language</category>
      
      
      <comments>https://keunbit.blog/2022/03/15/programming/python/python-00/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Intro. 왜 파이썬일까?</title>
      <link>https://keunbit.blog/2022/03/14/programming/python/python-intro/</link>
      <guid>https://keunbit.blog/2022/03/14/programming/python/python-intro/</guid>
      <pubDate>Mon, 14 Mar 2022 12:14:43 GMT</pubDate>
      
      <description>&lt;p&gt;안녕하세요. 블로그를 시작하고 처음 작성하는 포스팅인데요. 처음 작성하는 주제는 &lt;strong&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/strong&gt; 에 대해서 다뤄볼까 합니다. 아무래도 제가 처음 코딩을 접했던 ‘프로그래밍 언어’가 &lt;strong&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/strong&gt; 이기도 하고요.&lt;/p&gt;
&lt;p&gt;또 우연히 대학교 학부시절에 활동했던 동아리에 현재 활동하는 학생들을 대상으로 간단한 강의를 해야할 기회가 생겨 강의안을 만들겸 개념을 정리해볼까 합니다! (&lt;em&gt;Python 3.7.11 기준&lt;/em&gt;)&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>안녕하세요. 블로그를 시작하고 처음 작성하는 포스팅인데요. 처음 작성하는 주제는 <strong><em>Python</em></strong> 에 대해서 다뤄볼까 합니다. 아무래도 제가 처음 코딩을 접했던 ‘프로그래밍 언어’가 <strong><em>Python</em></strong> 이기도 하고요.</p><p>또 우연히 대학교 학부시절에 활동했던 동아리에 현재 활동하는 학생들을 대상으로 간단한 강의를 해야할 기회가 생겨 강의안을 만들겸 개념을 정리해볼까 합니다! (<em>Python 3.7.11 기준</em>)</p><span id="more"></span><p>**<em>Python</em>**은 무엇일까요? 사실 이 질문에 대한 답은 설명하기 식상하게 느껴질 정도로 많은 분들이 정리를 너무나도 잘 해주셨습니다...(<del>파이썬 언어의 창시자는 귀도 반 로섬이며, OS에 독립적으로 작동하며, 객체 지향적 언어(OOP) 이다. 또한 개발자 친화적이여서 코드가 간단하고 누군가 만들어 놓은 라이브러리를 쉽게 가져다 쓸 수 있는 장점이 있다 등등…</del>)</p><p>그래서 이번 포스팅에 대해서는 조금은 다른 얘기를 해보려고 합니다. 질문을 바꿔보겠습니다. “왜 <strong><em>Python</em></strong> 을 배우려고 하시나요?”</p><p>요즘따라 주변 지인, 친구들로부터 이런 질문을 많이 받는 것 같은데요.</p><blockquote><p>“요즘 코딩 안하면 안될 것 같은데 파이썬이 뭐야?” “파이썬 공부하려는데 강의 추천좀 해줘” “파이썬 할 줄 알면 취업에 도움이 좀 되나?” …</p></blockquote><p>보통 직장을 다니고 계시는 선배님이나 지인들은 “본인이 하고 있는 업무를 좀 더 효율적으로 바꿔볼 수 있을지 혹은 현재 업무 루틴에서 새로운 아이템을 추가해보기 위해서”, 취업 준비를 하거나 커리어 전환을 준비하시는 분들은 “요즘 핫한 언어이기 때문에” 라고 얘기를 하더라구요.</p><p>사실 전부 맞는 말입니다. <strong><em>Python</em></strong> 언어는 실제로 업무를 ‘자동화’해서 업무를 효율적으로 만들 수 있고, 또는 데이터를 가지고서 새롭게 ‘모델링’도 건드려볼 수 있구요, 마지막으로 실제로 ‘핫한 언어’ 가 맞기 때문이죠.</p><p>그러면 다시 물어보죠.</p><ul><li><p>직장에 다니고 계신 분들에게는</p><blockquote><ol><li>업무의 효율성을 높이기 위한 것이 반드시 코딩을 해야 하는 것인지?</li><li>코딩을 해야 한다면, 반드시 파이썬이어야 하는지?</li></ol></blockquote></li><li><p>취업 또는 커리어 전환을 준비하고 계신 분들에게는</p><blockquote><ol><li>파이썬으로 무엇을 하고 싶은지?</li><li>어떤 직무를 생각하는지?</li></ol></blockquote></li></ul><p>사실 모범 답안이 정해져 있는 것은 아닙니다 절대로...!</p><p>하지만 감히 이렇게 얘기는 할 수 있을 것 같습니다. 만약 <strong><em>Data Handling</em></strong> 이 그 이유에 대한 설명으로 들어가신다면, <strong><em>Python</em></strong> 을 공부한다면 좋을 것 같습니다. <del>(물론 Data Volume에 따라 단순히 엑셀로도 할 수 있고, 유형에 따라 Google Analytics를 공부해야할 수도 있습니다... 따져봐야 겠지만...)</del></p><p>조금 더 자료를 가져와보면… <strong>StackOverFlow Trend</strong> 인데요. (아마 개발을 하시는 분들이라면 대부분 아실만한… 개발자들 사이에서 Q&amp;A 커뮤니티 속 태그(Tag) 사용을 기반으로 측정한 것입니다.)</p><img src="/2022/03/14/programming/python/python-intro/trend.svg" class=""><p>데이터를 핸들링하는 대표적인 언어라 할 수 있는 <strong>Python, SAS, R</strong> 에 대한 트랜드 인데요. 이것 또한 그 이유중 하나일 수 있습니다. 실제로 프로그래밍 언어공부를 시작하는 시점에서 어떤 언어를 공부할지 고민을 하는데 있어서 그 언어의 커뮤니티가 얼마나 활성화 되어있는지, 그리고 Documents 가 상세하게 잘 작성되어 있는지 등의 여부도 상당히 중요하기 때문입니다.</p><p>그리고 파이썬을 기반으로 한 웹 프레임워크(DJango, Flask, FastAPI) 등도 탄탄하기에 프론트와 통신하는 백앤드 서버로도 개발이 용이합니다.<del>(거의 만능임...)</del> (이 내용은 다른 포스팅 주제에서 더 자세히 다뤄보겠습니다!)</p><p>이정도면 <strong><em>왜 Python 일까?</em></strong> 에 대한 답이 되었을까요?</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>이번 포스팅에서는 <strong><em>Python</em></strong> 주제 포스팅 시작으로 서론이 길었는데요. 저는 항상 무언가를 시작할 때 <strong><em>왜(why)</em></strong> 라는 질문에 대해 스스로가 설명이 되어야 동기부여도 생기고 집중력이 생기더라구요.</li><li><strong>Data Handling &amp; Machine Learning</strong> 등이 필요하고 관심이 있으시다면, Python 언어를 공부하시는 것을 감히 추천합니다. 그럼 다음 Python 주제로는 <em>Python 기초</em> 부터 시작하도록 하겠습니다!!!</li></ul><p><em>이상으로 이번 포스팅은 마치겠습니다. 개발 관련 공부를 할 수록 어렵고, 더더욱 고개가 숙여지네요...! 추가 의견이나 수정이 필요한 부분이 있다면 언제든지 거침없는 피드백 부탁드립니다! 부족한 글 읽어주셔서 감사합니다!</em></p>]]></content:encoded>
      
      
      <category domain="https://keunbit.blog/categories/Programming/">Programming</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/">Python</category>
      
      <category domain="https://keunbit.blog/categories/Programming/Python/Basic/">Basic</category>
      
      
      <category domain="https://keunbit.blog/tags/Python/">Python</category>
      
      <category domain="https://keunbit.blog/tags/Programming-Language/">Programming Language</category>
      
      
      <comments>https://keunbit.blog/2022/03/14/programming/python/python-intro/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
